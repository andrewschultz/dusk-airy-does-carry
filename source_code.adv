start_at = "r0"
start_theme = my_theme

#cch.py makes sure of things

game_information {
   game_name                    = Dusk, Airy, Does Carry
   game_version                 = 1.0.0
   game_shortname               = DADC
   written_by                   = Andrew Schultz
   uuid                         = 9998565c-3283-4dcd-9e5d-fafadbda5c2e
   year_of_release              = 2025
   copyright_message            = Free to distribute, voluntary payments welcome
   short_synopsis               = EctoComp 2025 Petite Mort entry, in the vein of {wp} and {ut}
}


## Defines locations in the world

strings {
   # top level strings
   dadc : string "<Dusk, Airy, Does Carry<#ccc>>" ;

   # game clue strings
   c_globe_old : string "<globe (old)<#88f>>" ;
   d_glow_bold : string "<glow (bold)<#ccc>>" ;

   # meta-verbs
   vm_about : string "<ABOUT<#f80>>" ;
   vm_credits : string "<CREDITS<#f80>>" ;
   vm_verbs : string "<VERBS<#f80>>" ;
   vm_versions : string "<VERSIONS<#f80>>" ;

   # parser error stuff
   custom_unknown_verb_error : string "Nothing comes of that. {dadc} has a reduced verb list, which you can see with {vm_verbs}, and all point-scoring commands are irregular." ;
   exits_err : dynamic_string {( is_at "r0" ? "{r0_cantgo}" :
      is_at "r1" ? "{r1_cantgo}" :
      is_at "r2" ? "{r2_cantgo}" :
      is_at "r3" ? "{r3_cantgo}" :
      is_at "r4" ? "{r4_cantgo}" :
      is_at "r5" ? "{r5_cantgo}" :
      is_at "r6" ? "{r6_cantgo}" :
      is_at "r7" ? "{r7_cantgo}" :
      is_at "r8" ? "{r8_cantgo}" :
      is_at "r9" ? "{r9_cantgo}" :
      "You can't go that way. I should have a better message, but I don't."
      )} ;
   nospecial_custom : string "You see no specific item like that. For rooms, <LOOK<#0f0>>. Note that this game may not note adjectives as synonyms, so use nouns." ;

   # items
   dump_ale_description : dynamic_string {( point_dew_nice ? "Full of dew, ready to hydrate." : "Well, actually, it's empty." )} ;

   # basics
   my_score : string "{score}/{max_score}" ;

   r0_loc : dynamic_string {( point_glow_bold ? "Now that the globe (old) emanates a {d_glow_bold}, you can see a passage leading up." : "You can't see much here. A small {c_globe_old} gives off a very dim light. It seems to be your only hope to illuminate a way out of here. But how to operate it?" )} ;
   r0_header : dynamic_string {( point_glow_bold ? "{d_glow_bold}" : "{c_globe_old}" )} ;
   r0_cantgo : dynamic_string {( point_glow_bold ? "The only constructive way out is up." : "It's too dark to see. Bumping around is dangerous." )} ;

   r1_header : dynamic_string {( point_dew_nice ? "Dew (Nice)" : "Dune/Ice" )} ;
   r1_loc : dynamic_string {( "Here the way is blocked in every direction except back east, by a large dune and lots of ice." + (point_dew_nice ? " Some of the ice has thawed, so you can get a bit of dew." : "") )} ;
   r1_cantgo : string "You can only go back east." ;

   r2_header : string "Comp-Lots-Com Plots" ;
   r2_loc : dynamic_string {( "A very techie nook. " + (point_reek_odor ? "Nothing left to do here." : point_broke_ode ? "A recoder has present, trying to fix the broke ode you broke." : "A BRO CODE is on the wall here." ) )} ;
   r2_cantgo : string "You can only go back south." ;

   r3_header : dynamic_string {( point_whee_zoos ? "Whee! Zoos!" : "Wheeze-Ooze" )} ;
   r3_loc : dynamic_string {( point_whee_zoos ? "All kinds of animals fill the zoos here. They're mostly sleeping, since it's night." : "Wheeze-ooze threatens to take over this whole area. It's full of undead energy." )} ;
   r3_cantgo : string "You can only go back south." ;

   r4_header : string "Car Parts" ;
   r4_loc : dynamic_string {( "Car parts lie strewn about the area." + (point_carp_arts ? " There are some carp arts, too, that helped you learn a thing or two about charisma, but you've internalized all that." : "") )} ;
   r4_cantgo : string "You can only go back west." ;

   r5_header : string "<The \"Scamp, Thus\" Camp<#ccc>>" ;
   r5_loc : string {( point_scam_pill ? "The scamp (ill) has left. Nothing much to do here." : "A scamp (ill) sits here. He's obviously trying to get you to notice he's sick." )} ;
   r5_cantgo : string "The only blocked way is back south." ;

   r6_header : dynamic_string {( point_aid_route ? "Aid Route" : "A Drought" )} ;
   r6_loc : dynamic_string {( point_aid_route ? "You've restored hydration to here." : "It's very, very dry here. Maybe you can find a way to fix that." )} ;
   r6_cantgo : string "The only blocked way is back south." ;

   r7_header : string "Cave Room" ;
   r7_loc : dynamic_string {( (point_k_vroom ? "You no longer feel stuck here." : "Ugh! You feel stuck here. You got what you wanted, but ... how to get out?") + "The only exit is back south." )} ;
   r7_cantgo : string "You can only go back south." ;

   r8_header : string "Whey Cup" ;
   r8_loc : string "A gigantic whey cup full of nasty whey is here. It reminds you you have some milk near the expiration date in the fridge." ;
   r8_cantgo : string "This is a north-south passage." ;

   r9_header : dynamic_string {( point_why_trains ? "<Wight Reigns/White Rains<#f4f>>" : "<Why-Trains<#ccc>>" )} ;
   r9_loc : dynamic_string {( point_why_trains ? "Why-trains echo through here, not of the why-bother sort, but of the \"Why not try new cool stuff\" variety." : "A wight reigns here as white rains fall." )} ;
   r9_cantgo : string "You can go any of the four main directions, or back down." ;
}

integers {
   score : integer "0" ;
   max_score : integer "12" ;
   tats_number : dynamic_integer {(
      is_at "r0" ? r0_hintnum :
      is_at "r1" ? r1_hintnum :
      is_at "r2" ? r2_hintnum :
      is_at "r3" ? r3_hintnum :
      is_at "r4" ? r4_hintnum :
      is_at "r5" ? r5_hintnum :
      is_at "r6" ? r6_hintnum :
      is_at "r7" ? r7_hintnum :
      is_at "r8" ? r8_hintnum :
      is_at "r9" ? r9_hintnum : 0
      )} ;
   r0_hintnum : dynamic_integer {(point_glow_bold ? 0 : 44)} ;
   r9_hintnum : dynamic_integer {(point_why_trains ? 0 : 36)} ;
   r8_hintnum : dynamic_integer {(point_wake_up ? 0 : 42)} ;
   r7_hintnum : dynamic_integer {(point_k_vroom ? 0 : 15)} ;
   r6_hintnum : dynamic_integer {(point_aid_route ? 0 : 35)} ;
   r5_hintnum : dynamic_integer {(point_scam_pill ? 0 : 44)} ;
   r4_hintnum : dynamic_integer {(point_carp_arts ? 0 : 44)} ;
   r3_hintnum : dynamic_integer {(point_blurb_lasting ? 0 :
      (point_whee_zoos ? 57 : 44) )} ;
   r2_hintnum : dynamic_integer {(point_reek_odor ? 0 : (point_broke_ode ? 44 : 53) )} ;
   r1_hintnum : dynamic_integer {(point_dew_nice ? 0 : 34)} ;
}

booleans {
   # game state (noncritical)
   warn_score_header : boolean "false" ;
   wait_yet : boolean "false" ;
   me_x_yet : boolean "false" ;
   won_yet : boolean "false" scope="survivor" ;

   # scoring
   point_glow_bold : boolean "false" ;
   point_dew_nice : boolean "false" ; #r1
   point_broke_ode : boolean "false" ; #r2-1
   point_reek_odor : boolean "false" ; #r2-2
   point_whee_zoos : boolean "false" ; #r3-1
   point_blurb_lasting : boolean "false" ; #r3-2
   point_carp_arts : boolean "false" ; #r4
   point_scam_pill : boolean "false" ; #r5
   point_aid_route : boolean "false" ; #r6
   point_k_vroom : boolean "false" ; #r7
   point_why_trains : boolean "false" ; #r9
   point_wake_up : boolean "false" ; #r8

   # game state combo
   r5_ready : dynamic_boolean {( point_carp_arts && point_blurb_lasting )} ;
   r6_ready : dynamic_boolean {( point_dew_nice && point_reek_odor )} ;
   r7_ready : dynamic_boolean {( point_scam_pill && point_aid_route )} ;

   # rendering
   indoors : dynamic_boolean {( is_at "r0" || is_at "r2" || is_at "r7" )} ;
   show_overlay : boolean "true" ;
}

vocabulary {
}

locations {
   r0 : location "{r0_loc}" header="{r0_header}" graphic="r0_graphic" {
      on_command {
         : match "glow bold" {
            : if (point_glow_bold) {
               : print "The globe is already giving light!" ;
               : done ;
            }
            : print "The globe begins to glow more boldly. You can see your way around. There are two exits. One's probably the way you came. The other leads to real, natural light, aboveground!" ;
            : set_true "point_glow_bold" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_glow_bold) {
            : match "glow _;_ bold" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
   r1 : location "{r1_loc}" header="{r1_header}" graphic="r_blank"  {
      on_command {
         : match "do nice" {
            : print {( "You resolve to be a decent person. This " + (point_dew_nice ? "on top of getting something from the Dune/Ice!" : "almost moves the dune/ice, but not quite. Perhaps you need more than just spiritual changes. \"Do\" does seem a bit vague.") )} ;
			: done ;
        }
         : match "dew nice" {
            : if (point_dew_nice) {
               : print "You've already gotten dew." ;
               : done ;
            }
            : print "The ice melts bit, leaving dew beneath it." ;
            : set_true "point_dew_nice" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_dew_nice) {
            : match "dew _;_ nice" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
   r2 : location "{r2_loc}" header="{r2_header}" graphic="r_blank"  {
      on_command {
         : match "broke ode" {
            : if (point_broke_ode) {
               : print "Already done!" ;
               : done ;
            }
            : print "Narrative text." ;
            : set_true "point_broke_ode" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_broke_ode) {
            : match "broke _;_ ode" {
               : gosub "say_half" ;
               : done ;
            }
         }
         : if (point_broke_ode) {
            : match "reek odor" {
               : if (point_reek_odor) {
                  : print "Already done!" ;
                  : done ;
               }
               : print "Narrative text." ;
               : set_true "point_reek_odor" ;
               : gosub "add_point" ;
               : done ;
            }
            : if (!point_reek_odor) {
               : match "reek _;_ odor" {
                  : gosub "say_half" ;
                  : done ;
               }
            }
         }
      }
   }
   r3 : location "{r3_loc}" header="{r3_header}" graphic="r_blank"  {
      on_command {
         : match "whee zoos" {
            : if (point_whee_zoos) {
               : print "Already done!" ;
               : done ;
            }
            : print "Narrative text." ;
            : set_true "point_whee_zoos" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_whee_zoos) {
            : match "whee _;_ zoos" {
               : gosub "say_half" ;
               : done ;
            }
         }
         : if (point_whee_zoos) {
            : match "blurb lasting" {
               : if (point_blurb_lasting) {
                  : print "Already done!" ;
                  : done ;
               }
               : print "Narrative text." ;
               : set_true "point_blurb_lasting" ;
               : gosub "add_point" ;
               : done ;
            }
            : if (!point_blurb_lasting) {
               : match "blurb _;_ lasting" {
                  : gosub "say_half" ;
                  : done ;
               }
            }
         }
      }
   }
   r4 : location "{r4_loc}" header="{r4_header}" graphic="r_blank"  {
      on_command {
         : match "carp arts" {
            : if (point_carp_arts) {
               : print "Already done!" ;
               : done ;
            }
            : print "Narrative text." ;
            : set_true "point_carp_arts" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_carp_arts) {
            : match "carp _;_ arts" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
   r5 : location "{r5_loc}" header="{r5_header}" graphic="r_blank"  {
      on_command {
         : match "scam pill" {
            : if (!r5_ready) {
               : print "You can't quite convince the scamp that you're able to sell the \"wares\" effectively." ;
               : done ;
            }
            : if (point_scam_pill) {
               : print "Already done!" ;
               : done ;
            }
            : print "Narrative text." ;
            : set_true "point_scam_pill" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_scam_pill) {
            : match "scam _;_ pill" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
   r6 : location "{r6_loc}" header="{r6_header}" graphic="r_blank"  {
      on_command {
         : match "aid route" {
            : if (!r6_ready) {
               : print "But you have nothing that could relieve the drought." ;
               : done ;
            }
            : if (point_aid_route) {
               : print "Already done!" ;
               : done ;
            }
            : print "Narrative text." ;
            : set_true "point_aid_route" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_aid_route) {
            : match "aid _;_ route" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
   r7 : location "{r7_loc}" header="{r7_header}" graphic="r_blank"  {
      on_command {
         : match "k vroom" {
            : if (point_k_vroom) {
               : print "Already done!" ;
               : done ;
            }
            : print "Narrative text." ;
            : set_true "point_k_vroom" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_k_vroom) {
            : match "k _;_ vroom" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
   r8 : location "{r8_loc}" header="{r8_header}" graphic="r_blank"  {
      on_command {
         : match "wake up" {
            : if (point_wake_up) {
               : print "Already done!" ;
               : done ;
            }
            : if (!point_why_trains) {
               : print "But you're pretty sure you need to dispose of the wight first." ;
               : done ;
            }
            : print "Narrative text." ;
            : set_true "point_wake_up" ;
            : gosub "add_point" ;
            : print "You wake up!" ;
            : if (!won_yet) {
               : print "{one_time}there's nothing new to be found on replaying. Try some of the other {ecomp} games, whether or not {ecomp} is over!" ;
            } : else {
               : print "Thanks for replaying. Sorry there was no new content!" ;
            }
            : set_true "won_yet" ;
            : win_game ;
         }
         : if (!point_wake_up) {
            : match "wake _;_ up" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
   r9 : location "{r9_loc}" header="{r9_header}" graphic="r_blank"  {
      on_command {
         : match "why trains" {
            : if (point_why_trains) {
               : print "Already done!" ;
               : done ;
            }
            : if (!point_k_vroom) {
               : print "You don't have the energy yet." ;
               : done ;
            }
            : print "Narrative text." ;
            : set_true "point_why_trains" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_why_trains) {
            : match "why _;_ trains" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
}

# Defines things in the world (scenery cannot be carried)

objects {
   phase_tats : object "<Fey Stats Phase Tats<#ccc>>" ;
   dump_ale : object "<Dumb-Pale-Dump Ale<#ccc>>" msg="{dump_ale_description}" ;
}

connections {
   from, direction, to = [
   r0, up, r9
   r9, north, r8
   r8, north, r7
   r9, west, r5
   r9, east, r6
   r5, west, r1
   r6, east, r4
   r5, north, r2
   r6, north, r3
   ]
}

barriers {
   block_init : block {
      location = r9
      block_when_not = point_glow_bold
      message = There will be a way up when you have a light source.
   }
}

subroutines {
   add_point : subroutine {
      : print "<Your score has just gone up by a point!<#ff0>>" ;
	  : increment "score" ;
	  : update_graphic ;
   }
   say_half : subroutine {
      : print "You got half right." ;
   }

   odd_dir_note : subroutine {
      : match "se _;sw _;ne _;nw _" {
         : print "You don't need to use diagonal directions. Only the four main cardinal directions, and (at the start) up/down." ;
         : done ;
      }
      : mask {
         : if (is_at "r9" || is_at "r0") {
            : match "d _;u _" {
               : return ;
            }
         }
      }
      : match "u _;d _;enter _;in _;exit _;out _" {
         : print "Only the four main cardinal directions are used here, and (at the start) up/down." ;
         : done ;
      }
   }
}

themes {
   my_theme : theme {
      status_bar {
         : header_text ;
         : dynamic_text "my_score" ;
      }
      theme_settings {
         parser_delay  = 0
      }
      colors {
         status_bar_pen   = 15
         status_bar_paper = #222
      }
      system_messages {

   i_cant_do_that = That's a valid command, but not right here and now.
   not_present = You can't see ${entity} here.
   ask_new_game                                   = Would you like to restart {cdsa}?
   ask_quit                                       = Do you wish to quit {cdsa}?
   invalid_choice                                 = {yn_or_12_or_14}
   post_quit = I hope you enjoyed the experience. Pressing {key_enter} will restart {cdsa}.
   unknown_verb                                   = {custom_unknown_verb_error}
   you_cant_go_that_direction                     = {exits_err}
   you_see_nothing_special = {nospecial_custom}
   you_see_nothing_special_2 = {nospecial_custom}
      }
   }
}

## Print the objective when the game starts

on_startup {
}

## Execute this every time a player moves or redescribes a location

on_describe {
}

## Test VERB NOUN that the player types and executes conditional actions

on_command {
   : gosub "odd_dir_note" ;
   : match "z _;wait _" {
      : print "\"Loaf, right? Lo, fright!\"" ;
      : if (!wait_yet) {
         : print "{note_once}This is just a silly general response. Waiting gives no penalty or benefit." ;
         : set_true "wait_yet" ;
      }
   }
   : match "about _" {
      : print "Fill in later." ;
   }
   : match "credits _;credit _" {
      : print "Fill in later." ;
   }
   : match "help _;hint _;hints _" {
      : print "Fill in later." ;
   }
   : match "history _" {
      : print "Fill in later." ;
   }
   : match "score _" {
      : print "You've currently scored {score} of {max_score} total points. There are no bonus points." ;
      : if (!warn_score_header) {
         : print "{note_once}This is tracked in the upper left." ;
         : set_true "warn_score_header" ;
      }
   }
   : match "think _" {
      : print "Fill in later." ;
   }
   : match "verbs _;verb _" {
      : print "Fill in later." ;
   }
   : match "take _;drop _" {
      : print "You don't need to TAKE or DROP anything here. It's all done for you." ;
      : done ;
   }
   : match "x me;x myself" {
      : if (!me_x_yet) {
         : print "Weird. You see some numbers on your arm that seem to morph a bit. Perhaps they can help in some way. Let's call them fey stats/phase-tats." ;
         : pocket "phase_tats" ;
         : set_true "me_x_yet" ;
      } : else {
         : print "Nothing on you but the tats which can give hints." ;
      }
      : done ;
   }
   : if (me_x_yet) {
      : match "_ tats;_ fey;_ phase;_ stats" {
         : print "The tats swirl and form a number: {tats_number}." ;
         : done ;
      }
   }
}

on_tick {
}

on_render {
   : if (!show_overlay) {
      : done ;
   }
   : if (!indoors) {
      : if (score == 1) {
         : overlay "p_1" x="0" y="0" ;
      } : else_if (score == 2) {
         : overlay "p_2" x="0" y="0" ;
      } : else_if (score == 3) {
         : overlay "p_3" x="0" y="0" ;
      } : else_if (score == 4) {
         : overlay "p_4" x="0" y="0" ;
      } : else_if (score == 5) {
         : overlay "p_5" x="0" y="0" ;
      } : else_if (score == 6) {
         : overlay "p_6" x="0" y="0" ;
      } : else_if (score ==7) {
         : overlay "p_7" x="0" y="0" ;
      } : else_if (score == 8) {
         : overlay "p_8" x="0" y="0" ;
      } : else_if (score == 9) {
         : overlay "p_9" x="0" y="0" ;
      } : else_if (score == 10) {
         : overlay "p_10" x="0" y="0" ;
      } : else_if (score >= 11) {
         : overlay "p_11" x="0" y="0" ;
      }
      : if (is_at "r1") {
         : overlay "r_1" x="0" y="0" ;
      }
   }
}

assets {
   graphics {
      r0_graphic : dynamic_graphic {( point_glow_bold ? "r0_after" : "r0_before" )} ;
      r0_after : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAA8BAMAAAB7k3k3AAAAFVBMVEUAAAAAwACmyvDAYAAAAMCAgID//wC4ziU5AAAC2ElEQVR4Xu3ZQY6jMBAF0BItH6Akn8BScgGm92PJ7JFILhBpcv8jzNhYfMdgg4072cxftdjU0y+AhtD9w6kF/AdM/fdHAVN/7z8JsNOnAxWMRPQjANd/f2g+derSEID5rgJjM2TmO4ACoQUA5f8yPolyfZRS1+efZgB0fzNLUv272PnPpIDqCzDIkCmAFARtAJifE9CSbgY8WwGmlwWw3F7C+AJ4WMCfRoBvzNesmc2mgIKoq3ratAH04QICwLBRAM7CKyo4CZiWAjRLALQ06wKwg0f6LKDqApjlrHB/sxniAhA1nwWPx3kALgFf/lyAjAAUA67qamu4bF6tomIDbOOqnwGSWaYBnVIOoFTqdlF6DWo3H7EARgXjCrAEHaysh7roUYDETcDtgGUSQArJAkiUbSBo4QVAGUDcAZUIsAGXCMBDEtCFgiyARAGAsQIOASMVVEBxjp0CPuF8wyYLQPIAOvAciAtgqVkeB1zyAHEYgAKsQrNMA7oCAIk9gAEgiDQGrR7fAW3kKECGAMsZ0oCuBCB2AFrHAHcAgD3BZQdAewBfwct8AEbaTAlA5AF+Iur3heQBVACgPYBhaXQw3ycPoAKAyN4J8RjGAgAYAUhF7AJoD2B4C/CbkJ8GoAIA5JsAZGy2AHYFjQAiCSCieSp2sACWcxBj2gLGL6e7OQDLNcAn7vAsANIvZ/MA3AkASKQBgDzAym5+JgQagLxAeMusygDINQ6JZ024E7nI6F+yZEax+daSA4Tn0rigIgAnAflQTUT4arx6IkcbaM8Q0athDEABjQhx+z4TnofRExmARgQBpQA53oFZgg00EOy8m6ECGQCGcwBR8HaK68AEOQco/UJxWwP6E4CKbzQOIMMCpnoAOCUV6FeAldUBROVnKv2ygX+mSoCo/lIaAoZ6QP23Yi2D+WWA9l/L3whABRDg6HsA+LEG/ePgOwBTn6ilItTqV8PpXpe/PWpq7nkcXCUAAAAASUVORK5CYII=" ;
      r0_before : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAA8AgMAAAD004yXAAAADFBMVEUAAAAAQABAIAAAAECkMZGDAAABl0lEQVR4Xt3XPWoDMRAFYLHbBAezV3C5uE8ZfIpBjUFXcONae5QtcwyRO4i9hhthCBYv+jPuUjx1EQhcfezME9ZI/e81fHUCx10nsA5LF7Bb1NoFpA7ME+BYIH//OwDQFaR9ysCNBOa0kdeDBFIFUwbYLgy1gmDZGt6UGgHvDdvGtVQQCuDIEE9RF2C7kSEiaHiLIA+uBQreIAB3CpiVGkUMtgRcNQEclNqLAMiAOCqED9HQWbjKhQghAwLJQGCAtL2IacCZBaSUIASwKyGImFKBMcQxqIAFoL3lAQAwiJoBpicA3MECugICRwB734AoJBBqCPAkMMXWghwGBUDHeg7TcsRJnLAhL88DoReI9gloDkAvEM2ziVoRwIgothcQAOCBdhQjBSxKZUCzf2mqAdIDnBLQ2njhLucX4KirbYqthCiOnC8aAM1e776mgDM5IiGI4ee0NcfQgB8GmEsMtgDf5KA6xgYMCzllfQrqrLuwk2oFHAfMaW8tg6V3Wl/Y98KYgfKTPAmqvljIx9fx1Y7eZ+PhD+AXExSOh/4QrGsAAAAASUVORK5CYII=" ;

      r_1 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoCAYAAAAR+iSJAAAD7ElEQVR4nO2dy3HbMBRFLzOpxh6lkaSCLN2CZ1yEJ2rBS1cgNxJO0g6ziOEgFEUSxPtckO9sshIBArgHj6AcdQMGBEEgRzdgkEhVB4il89a1PgldPwgCQSzCD4QAgkCUTqCk7iQ6spIQQBAIU2OAFH6L3R8IAQSBGFLP/pLhX+KzUFsBIf3l/LGWTt8eLSvLgIQlmUg8sgSE5OHPCRHowHbyv/ZR4lACOMKOeCv4t9jrOFjDKIA11zmMAI6yI5YKILG3cbBGUgBA/UHi2s8fQgBrQrGHAGwNf84exsEaqfB/XA+NCmC8ABkW05ZQMPS7FInw57Q4Bl5oCADYLgEXAcwtQK/FdJQdUTr8OS3cvzfSAgDqqgBzAbCW2FLBYA6BZvjHMI+DF2zhL/18tQBYT501gsEWAMvw57CNw5j+ch6s+sgqAKy8RpUAmE+ctcLBtPi9BJBgGovE1Jho9VMr/ED9q0DV14Dsz9bawWBY+N7hz2EYD2B5TKT7ybj7l16nWACSC09j4bze3Q+n5wfpy17hueiZwp/TwjmPZB8PJwD25+r+ch76p5e/1zWQAGC/6FnDn9AeD5bqMwWHcTLEDwFbKalTP5MEABsRWEqAXQCAvNSlrpVT20eN3V8KUQG08prpVj+tKoKW325oUDseFve5tY/Muz8gJIDXu/sBsCulE1smZc1isagKWih/Ldk6Htb3WdLPPYUfmBDAePCty2mgfOGULBjNikBTAEnIgL2UaykZF2/JzfWVPfxAhQCWBp5RBFsXS4sSmDrfmGyfVA5ac6nBVF/3GH4A6H5efhTfE8tJe82i0boHDQGsvc8lOQC+ghiPDVPox4z7ynzolzATAGAvAeDfpEgtnP7ppYkqQPJ+c7zOd5iDn8jnsJXdHzAUAGArAY22tAQA8L8K85CBx6ZRQ5rDve7+QKUAAJtJ1WxDQwKpv99//6qWgMVuaSkDj7OkGr58fQTAv/tv/tPhWgEA+hLQ3Km1BJCu2cL78P/aCxlccXqXACvuAgD0JrO1snGqv628D79q3yig7CJgF0ANYgJISE7mHsKf09L7cC9YZaApAcnfASxuW1oAidrSem/hz1kjgqMKIIftOw8aEpD+KbDi9rUEUIvmc78UNbvVnAQi/Mu4fDFNWACe4U9VRwhgA61VJ3vG/EtpghJwLf3f/43fBiwkws9FmgezA8u3s4gEvP43mbzdAaS/Dsy6+0f4eTk9P0zKgBnr3T9/5EhtRwWwkgh/G7QwPx6l/63zBsoKgI0If5DTv503f9aj9J87bKQUAGPQGPsUtIXHqf9Sm5QCYCPCH9Ti+cpvrs0QQBAY4fXcP8cfmnadkDYY9DQAAAAASUVORK5CYII=" ;

      # for conditional graphic outside stuff
      r_blank : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEX///+nxBvIAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;

      # outside graphics from darkest to lightest
      p_11 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAAPAax8/GAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
      p_10 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAAOAHcN+iAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
      p_9 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAANAhqe8OAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
      p_8 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAAMA8Hv9qAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
      p_7 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAALBsG45WAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
      p_6 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAAKBxrJ4yAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
      p_5 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAAJBXda6eAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
      p_4 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAAIBKwr76AAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
      p_3 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAAHD3f0zmAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
      p_2 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAAGDqyFyCAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
      p_1 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAAFDMEWwuAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
   }
}
