start_at = "r0"
start_theme = my_theme

#cch.py makes sure of things

game_information {
   game_name                    = Dusk, Airy, Does Carry
   game_version                 = 1.0.0
   game_shortname               = DADC
   written_by                   = Andrew Schultz
   uuid                         = 9998565c-3283-4dcd-9e5d-fafadbda5c2e
   year_of_release              = 2025
   copyright_message            = Free to distribute, voluntary payments welcome
   short_synopsis               = EctoComp 2025 Petite Mort entry, in the vein of {g_wp} and {g_ut}
}


## Defines locations in the world

strings {
   # top level strings
   dadc : string "<Dusk, Airy, Does Carry<#ccc>>" ;
   g_wp : string "<Why Pout<#0f0>>[https://andrewschultz.itch.io/jam/why-pout]" ;
   g_ut : string "<Why Pout<#0f0>>[https://andrewschultz.itch.io/jam/us-too]" ;
   ecomp : string "<EctoComp<#f80>>[https://itch.io/jam/ectocomp-2025]" ;

   # noting stuff
   one_time : string "<ONE-TIME NOTE: <#f0f>>" ;
   key_enter : string "the <ENTER<#f88>>/<RETURN<#f88>> key" ;

   # game clue strings
   gb_done : string "<GLOW BOLD<#44f>>" ; #r0
   c_globe_old : string "<globe (old)<#88f>>" ;
   d_glow_bold : string "<glow (bold)<#ccc>>" ;
   c_re_coder : string "<RE-CODER<#88f>>" ;
   c_bro_code : string "<BRO CODE<#88f>>" ;
   tats_hint : dynamic_string {( me_x_yet ? "{xtats}" : "something you can findd with {xme}" )} ;

   # item strings
   i_dpda : string "<Dumb-Pale-Dump Ale<#ccc>>" ;
   i_fspt : string "<Fey Stats Phase Tats<#ccc>>" ;

   # thinky strings
   t_scam_pill : string "<SCAM PILL<#f80>>" ;
   t_aid_route : string "<AID ROUTE<#f80>>" ;
   t_k_vroom : string "<K VROOM<#f80>>" ;
   t_why_trains : string "<WHY TRAINS<#f80>>" ;
   t_wake_up : string "<WAKE UP<#f80>>" ;

   # meta-verbs
   hone_aye : string "<HONE AYE<#ff0>>/<HONE EYE<#ff0>>" ;
   ho_nigh : string "<HO NIGH<#ff0>>" ;
   vm_about : string "<ABOUT<#f80>>" ;
   vm_credits : string "<CREDITS<#f80>>" ;
   vm_think : string "<THINK<#f80>>" ;
   vm_verbs : string "<VERBS<#f80>>" ;
   vm_versions : string "<VERSIONS<#f80>>" ;

   xtats : string "<X TATS<#f80>>" ;
   xme : string "<X ME<#0f0>>" ;

   # "once" strings
   once_scam_pill : dynamic_string {( r5_ready ? "now" : "once" )} ;
   once_aid_route : dynamic_string {( r6_ready ? "now" : "once" )} ;
   once_k_vroom : dynamic_string {( r7_ready ? "now" : "once" )} ;
   once_why_trains : dynamic_string {( point_k_vroom ? "now" : "once" )} ;
   once_wake_up : dynamic_string {( point_why_trains ? "now" : "once" )} ;

   # parser error stuff
   custom_unknown_verb_error : string "Nothing comes of that. {dadc} has a reduced verb list, which you can see with {vm_verbs}, and all point-scoring commands are irregular." ;
   exits_err : dynamic_string {( is_at "r0" ? "{r0_cantgo}" :
      is_at "r1" ? "{r1_cantgo}" :
      is_at "r2" ? "{r2_cantgo}" :
      is_at "r3" ? "{r3_cantgo}" :
      is_at "r4" ? "{r4_cantgo}" :
      is_at "r5" ? "{r5_cantgo}" :
      is_at "r6" ? "{r6_cantgo}" :
      is_at "r7" ? "{r7_cantgo}" :
      is_at "r8" ? "{r8_cantgo}" :
      is_at "r9" ? "{r9_cantgo}" :
      "You can't go that way. I should have a better message, but I don't."
      )} ;
   nospecial_custom : string "You see no specific item like that. For rooms, <LOOK<#0f0>>. Note that this game may not note adjectives as synonyms, so use nouns." ;
   yn_or_12_or_14 : dynamic_string {( (verb_is "save" || verb_is "load") ? "Please choose from 1 to 4." : in_number_choice ? "Please choose 1 or 2." : "Please choose YES/Y or NO/N." )}

   # items
   dump_ale_description : dynamic_string {( point_dew_nice ? "Full of dew, ready to hydrate." : "Well, actually, it's empty." )} ;

   # basics
   my_score : string "{score}/{max_score}" ;

   r0_loc : dynamic_string {( point_glow_bold ? "Now that the globe (old) emanates a {d_glow_bold}, you can see a passage leading up." : "You can't see much here. A small {c_globe_old} gives off a very dim light. It seems to be your only hope to illuminate a way out of here. But how to operate it?" )} ;
   r0_header : dynamic_string {( point_glow_bold ? "{d_glow_bold}" : "{c_globe_old}" )} ;
   r0_cantgo : dynamic_string {( point_glow_bold ? "The only constructive way out is up." : "It's too dark to see. Bumping around is dangerous." )} ;

   r1_header : dynamic_string {( point_dew_nice ? "Dew (Nice)" : "Dune/Ice" )} ;
   r1_loc : dynamic_string {( "Here the way is blocked in every direction except back east, by a large dune and lots of ice." + (point_dew_nice ? " Some of the ice has thawed, so you can get a bit of dew." : "") )} ;
   r1_cantgo : string "You can only go back east." ;

   r2_header : string "<Comp-Lots-Com Plots<#888>>" ;
   r2_loc : dynamic_string {( "A very techie nook. " + (point_reek_odor ? "Nothing left to do here." : point_broke_ode ? "A {c_re_coder} is present, trying to fix the broke ode you broke." : "A {c_bro_code} is on the wall here." ) )} ;
   r2_cantgo : string "You can only go back south." ;

   r3_header : dynamic_string {( point_whee_zoos ? "Whee! Zoos!" : "Wheeze-Ooze" )} ;
   r3_loc : dynamic_string {( point_whee_zoos ? "All kinds of animals fill the zoos here. They're mostly sleeping, since it's night." : "Wheeze-ooze threatens to take over this whole area. It's full of undead energy." )} ;
   r3_cantgo : string "You can only go back south." ;

   r4_header : string "Car Parts" ;
   r4_loc : dynamic_string {( "Car parts lie strewn about the area." + (point_carp_arts ? " There are some carp arts, too, that helped you learn a thing or two about charisma, but you've internalized all that." : "") )} ;
   r4_cantgo : string "You can only go back west." ;

   r5_header : string "<The \"Scamp, Thus\" Camp<#ccc>>" ;
   r5_loc : string {( point_scam_pill ? "The scamp (ill) has left. Nothing much to do here." : "A scamp (ill) sits here. He's obviously trying to get you to notice he's sick." )} ;
   r5_cantgo : string "The only blocked way is back south." ;

   r6_header : dynamic_string {( point_aid_route ? "Aid Route" : "A Drought" )} ;
   r6_loc : dynamic_string {( point_aid_route ? "You've restored hydration to here." : "It's very, very dry here. Maybe you can find a way to fix that." )} ;
   r6_cantgo : string "The only blocked way is back south." ;

   r7_header : string "Cave Room" ;
   r7_loc : dynamic_string {( (point_k_vroom ? "You no longer feel stuck here." : "Ugh! You feel stuck here. You got what you wanted, but ... how to get out?") + "The only exit is back south." )} ;
   r7_cantgo : string "You can only go back south." ;

   r8_header : string "Whey Cup" ;
   r8_loc : string "A gigantic whey cup full of nasty whey is here. It reminds you you have some milk near the expiration date in the fridge back home." ;
   r8_cantgo : string "This is a north-south passage." ;

   r9_header : dynamic_string {( point_why_trains ? "<Why-Trains<#ccc>>" : "<Wight Reigns/White Rains<#f4f>>" )} ;
   r9_loc : dynamic_string {( point_why_trains ? "Why-trains echo through here, not of the why-bother sort, but of the \"Why not try new cool stuff\" variety." : "A wight reigns here as white rains fall." )} ;
   r9_cantgo : string "You can go any of the four main directions, or back down." ;
}

integers {
   score : integer "0" ;
   max_score : integer "12" ;
   tats_number : dynamic_integer {(
      is_at "r0" ? r0_hintnum :
      is_at "r1" ? r1_hintnum :
      is_at "r2" ? r2_hintnum :
      is_at "r3" ? r3_hintnum :
      is_at "r4" ? r4_hintnum :
      is_at "r5" ? r5_hintnum :
      is_at "r6" ? r6_hintnum :
      is_at "r7" ? r7_hintnum :
      is_at "r8" ? r8_hintnum :
      is_at "r9" ? r9_hintnum : 0
      )} ;
   r0_hintnum : dynamic_integer {(point_glow_bold ? 0 : 44)} ;
   r9_hintnum : dynamic_integer {(point_why_trains ? 0 : 36)} ;
   r8_hintnum : dynamic_integer {(point_wake_up ? 0 : 42)} ;
   r7_hintnum : dynamic_integer {(point_k_vroom ? 0 : 15)} ;
   r6_hintnum : dynamic_integer {(point_aid_route ? 0 : 35)} ;
   r5_hintnum : dynamic_integer {(point_scam_pill ? 0 : 44)} ;
   r4_hintnum : dynamic_integer {(point_carp_arts ? 0 : 44)} ;
   r3_hintnum : dynamic_integer {(point_blurb_lasting ? 0 :
      (point_whee_zoos ? 57 : 44) )} ;
   r2_hintnum : dynamic_integer {(point_reek_odor ? 0 : (point_broke_ode ? 44 : 53) )} ;
   r1_hintnum : dynamic_integer {(point_dew_nice ? 0 : 34)} ;
}

booleans {
   # game state (noncritical)
   showed_first_note : boolean "false" ;
   warn_score_header : boolean "false" ;
   wait_yet : boolean "false" ;
   me_x_yet : boolean "false" ;
   won_yet : boolean "false" scope="survivor" ;
   in_number_choice : boolean "false" ;

   # scoring, in approximate order
   point_glow_bold : boolean "false" ;
   point_dew_nice : boolean "false" ; #r1
   point_broke_ode : boolean "false" ; #r2-1
   point_reek_odor : boolean "false" ; #r2-2
   point_whee_zoos : boolean "false" ; #r3-1
   point_blurb_lasting : boolean "false" ; #r3-2
   point_carp_arts : boolean "false" ; #r4
   point_scam_pill : boolean "false" ; #r5
   point_aid_route : boolean "false" ; #r6
   point_k_vroom : boolean "false" ; #r7
   point_why_trains : boolean "false" ; #r9
   point_wake_up : boolean "false" ; #r8

   think_scam_pill : boolean "false" ; #r5
   think_aid_route : boolean "false" ; #r5
   think_k_vroom : boolean "false" ; #r7
   think_why_trains : boolean "false" ; #r9
   think_wake_up : boolean "false" ; #r8

   think_any : dynamic_boolean {( think_scam_pill || think_aid_route || think_k_vroom || think_why_trains || think_wake_up )} ;

   # game progress (critical)
   progress_ale_full : boolean "false" ;

   # option(s)
   opt_hone_aye : boolean "false" ;

   # game state combo
   can_fill_ale : dynamic_boolean {( point_dew_nice && point_reek_odor && !progress_ale_full )} ;
   r5_ready : dynamic_boolean {( point_carp_arts && point_blurb_lasting )} ;
   r6_ready : dynamic_boolean {( progress_ale_full && point_reek_odor )} ;
   r7_ready : dynamic_boolean {( point_scam_pill && point_aid_route )} ;

   # blocker dynamic booleans
   r0_hone_block : dynamic_boolean {( opt_hone_aye && point_glow_bold )} ;
   r1_hone_block : dynamic_boolean {( opt_hone_aye && progress_ale_full )} ;
   r2_hone_block : dynamic_boolean {( opt_hone_aye && point_reek_odor )} ;
   r3_hone_block : dynamic_boolean {( opt_hone_aye && point_blurb_lasting )} ;
   r4_hone_block : dynamic_boolean {( opt_hone_aye && point_carp_arts )} ;
   r5_hone_block : dynamic_boolean {( opt_hone_aye && progress_ale_full && point_dew_nice && point_reek_odor && point_scam_pill && is_at "r9" )} ;
   r6_hone_block : dynamic_boolean {( opt_hone_aye && point_aid_route && point_blurb_lasting && point_carp_arts && is_at "r9" )} ;
   r7_hone_block : dynamic_boolean {( opt_hone_aye && point_k_vroom )} ;
   r9_hone_block : dynamic_boolean {( opt_hone_aye && point_why_trains && is_at "r8" )} ;

   # rendering
   indoors : dynamic_boolean {( is_at "r0" || is_at "r2" || is_at "r7" )} ;
   show_overlay : boolean "true" ;
}

vocabulary {
}

locations {
   r0 : location "{r0_loc}" header="{r0_header}" graphic="r0_graphic" {
      on_command {
         : match "glow bold" {
            : if (point_glow_bold) {
               : print "The globe is already giving light!" ;
               : done ;
            }
            : print "The globe begins to glow more boldly. You can see your way around. There are two exits. One's probably the way you came. The other leads to real, natural light, aboveground!" ;
            : set_true "point_glow_bold" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_glow_bold) {
            : match "glow _;_ bold" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
   r1 : location "{r1_loc}" header="{r1_header}" graphic="r_blank"  {
      on_command {
         : match "do nice" {
            : print {( "You resolve to be a decent person. This " + (point_dew_nice ? "on top of getting something from the Dune/Ice!" : "almost moves the dune/ice, but not quite. Perhaps you need more than just spiritual changes. \"Do\" does seem a bit vague.") )} ;
			: done ;
        }
         : match "dew nice" {
            : if (point_dew_nice) {
               : print "You've already gotten dew." ;
               : done ;
            }
            : print "The ice melts bit, leaving dew beneath it." ;
            : set_true "point_dew_nice" ;
            : gosub "add_point" ;
            : gosub "ale_fill_check" ;
            : done ;
         }
         : if (!point_dew_nice) {
            : match "dew _;_ nice" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
      on_describe {
         : gosub "ale_fill_check" ;
      }
   }
   r2 : location "{r2_loc}" header="{r2_header}" graphic="r2_graphic"  {
      on_command {
         : match "broke ode" {
            : if (point_broke_ode) {
               : print "Already done!" ;
               : done ;
            }
            : print "Narrative text." ;
            : set_true "point_broke_ode" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_broke_ode) {
            : match "_ bro;_ code" {
               : print "The bro code seems firmly in place. You see no cracks in its reasoning, which is kind of depressing, because it feels simplistic. But they must be there!" ;
               : done ;
            }
            : match "broke _;_ ode" {
               : gosub "say_half" ;
               : done ;
            }
         }
         : if (point_broke_ode) {
            : match "reek odor" {
               : if (point_reek_odor) {
                  : print "Already done!" ;
                  : done ;
               }
               : print "Narrative text." ;
               : set_true "point_reek_odor" ;
               : gosub "add_point" ;
               : done ;
            }
            : if (!point_reek_odor) {
               : match "_ re;_ coder;_ recoder" {
                  : print "Working frantically, staring at the screen, trying to rebuild the Bro Code. You have plenty of time to distract him from this daunting task, but you just need to find the right distraction." ;
                  : done ;
               }
               : match "reek _;_ odor" {
                  : gosub "say_half" ;
                  : done ;
               }
            }
         }
      }
   }
   r3 : location "{r3_loc}" header="{r3_header}" graphic="r_blank"  {
      on_command {
         : match "whee zoos" {
            : if (point_whee_zoos) {
               : print "Already done!" ;
               : done ;
            }
            : print "Narrative text." ;
            : set_true "point_whee_zoos" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_whee_zoos) {
            : match "whee _;_ zoos" {
               : gosub "say_half" ;
               : done ;
            }
         }
         : if (point_whee_zoos) {
            : match "blurb lasting" {
               : if (point_blurb_lasting) {
                  : print "Already done!" ;
                  : done ;
               }
               : print "Narrative text." ;
               : set_true "point_blurb_lasting" ;
               : gosub "add_point" ;
               : done ;
            }
            : if (!point_blurb_lasting) {
               : match "blurb _;_ lasting" {
                  : gosub "say_half" ;
                  : done ;
               }
            }
         }
      }
   }
   r4 : location "{r4_loc}" header="{r4_header}" graphic="r_blank"  {
      on_command {
         : match "carp arts" {
            : if (point_carp_arts) {
               : print "Already done!" ;
               : done ;
            }
            : print "Narrative text." ;
            : set_true "point_carp_arts" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_carp_arts) {
            : match "carp _;_ arts" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
   r5 : location "{r5_loc}" header="{r5_header}" graphic="r_blank"  {
      on_command {
         : match "scam pill" {
            : if (!r5_ready) {
               : print "You can't quite convince the scamp that you're able to sell the \"wares\" effectively." ;
               : set_true "think_scam_pill" ;
               : done ;
            }
            : if (point_scam_pill) {
               : print "Already done!" ;
               : done ;
            }
            : print "Narrative text." ;
            : set_true "point_scam_pill" ;
            : set_false "think_scam_pill" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_scam_pill) {
            : match "scam _;_ pill" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
   r6 : location "{r6_loc}" header="{r6_header}" graphic="r_blank"  {
      on_command {
         : match "aid route" {
            : if (!r6_ready) {
               : print "But you have nothing that could relieve the drought." ;
               : set_true "think_aid_route" ;
               : done ;
            }
            : if (point_aid_route) {
               : print "Already done!" ;
               : done ;
            }
            : print "Narrative text." ;
            : set_true "point_aid_route" ;
            : set_false "think_aid_route" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_aid_route) {
            : match "aid _;_ route" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
   r7 : location "{r7_loc}" header="{r7_header}" graphic="r_blank"  {
      on_command {
         : match "k vroom" {
            : if (point_k_vroom) {
               : print "Already done!" ;
               : done ;
            }
            : if (!r7_ready) {
               : print "More to do." ;
               : set_true "think_k_vroom" ;
               : done ;
            }
            : print "Narrative text." ;
            : set_true "point_k_vroom" ;
            : set_false "think_k_vroom" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_k_vroom) {
            : match "k _;_ vroom" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
   r8 : location "{r8_loc}" header="{r8_header}" graphic="r_blank" {
      on_command {
         : match "wake up" {
            : if (point_wake_up) {
               : print "Already done!" ;
               : done ;
            }
            : if (!point_why_trains) {
               : print "But you're pretty sure you need to dispose of the wight first." ;
               : set_true "think_wake_up" ;
               : done ;
            }
            : print "Narrative text." ;
            : set_true "point_wake_up" ;
            : set_false "think_wake_up" ;
            : gosub "add_point" ;
            : print "You wake up!" ;
            : if (!won_yet) {
               : print "{one_time}there's nothing new to be found on replaying. Try some of the other {ecomp} games, whether or not {ecomp} is over!" ;
            } : else {
               : print "Thanks for replaying. Sorry there was no new content!" ;
            }
            : set_true "won_yet" ;
            : win_game ;
         }
         : if (!point_wake_up) {
            : match "wake _;_ up" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
   r9 : location "{r9_loc}" header="{r9_header}" graphic="r_blank"  {
      on_command {
         : match "why trains" {
            : if (point_why_trains) {
               : print "Already done!" ;
               : done ;
            }
            : if (!point_k_vroom) {
               : print "You don't have the energy yet." ;
               : set_true "think_why_trains" ;
               : done ;
            }
            : print "Narrative text." ;
            : set_false "think_why_trains" ;
            : set_true "point_why_trains" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_why_trains) {
            : match "why _;_ trains" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
}

# Defines things in the world (scenery cannot be carried)
objects {
   phase_tats : object "{i_fspt}" ;
   dump_ale : object "{i_dpda}" msg="{dump_ale_description}" ;
}

connections {
   from, direction, to = [
   r0, up, r9
   r9, north, r8
   r8, north, r7
   r9, west, r5
   r9, east, r6
   r5, west, r1
   r6, east, r4
   r5, north, r2
   r6, north, r3
   ]
}

barriers {
   block_init : block {
      location = r9
      block_when_not = point_glow_bold
      message = There will be a way up when you have a light source.
   }
   block_hone_r0 : block {
      location = r0
      block_when = r0_hone_block
      message = No need to go back. You found the light source to leave.
   }
   block_hone_r1 : block {
      location = r1
      block_when = r1_hone_block
      message = No need to go back. You got dew in the ale bottle.
   }
   block_hone_r2 : block {
      location = r2
      block_when = r2_hone_block
      message = No need to go back. The ale bottle was all you needed.
   }
   block_hone_r3 : block {
      location = r3
      block_when = r3_hone_block
      message = No need to go back. The blurb, lasting, is stuck in your head. That's enough.
   }
   block_hone_r4 : block {
      location = r4
      block_when = r4_hone_block
      message = No need to go back. You've learned the carp arts as well as you could.
   }
   block_hone_r5 : block {
      location = r5
      block_when = r5_hone_block
      message = No need to go back. You've got what you needed from the camp and beyond.
   }
   block_hone_r6 : block {
      location = r6
      block_when = r6_hone_block
      message = No need to go back. You got what you needed from the aid route and beyond.
   }
   block_hone_r7 : block {
      location = r7
      block_when = r7_hone_block
      message = No need to go back. You got what you needed from the cave room.
   }
   block_hone_r9 : block {
      location = r9
      block_when = r9_hone_block
      message = No need to go back. You defeated the wight reign(s). Time to finish things off.
   }
}

subroutines {
   add_point : subroutine {
      : print "<Your score has just gone up by a point!<#ff0>>" ;
	  : increment "score" ;
	  : update_graphic ;
   }
   say_half : subroutine {
      : print "You got half right." ;
   }

   ale_fill_check : subroutine {
      : if (can_fill_ale) {
         : print "With the dew flowing and the empty {i_dpda}, you have an idea. You can fill the {i_dpda} with dew to see if, indeed, it really does have increased capacity! It most certainly does." ;
         : set_true "progress_ale_full" ;
      }
   }

   check_options : subroutine {
      : match "hone aye;hone eye" {
         : print {( "Avaiilable exits are " + (opt_hone_aye ? "already" : "now") + " honed to ones you still need to use to win." )} ;
         : if (tats_number == 0 && !opt_hone_aye) {
            : print "Since you're choosing this option, and you're done here, I'll make a note of that. You can exit, but you can't come back." ;
         }
         : set_true "opt_hone_aye" ;
      }
      : match "ho nigh" {
         : print {( "Exits are " + (opt_hone_aye ? "already" : "now") + " all available, even ones you don't need to revisited." )} ;
         : set_false "opt_hone_aye" ;
      }
   }

   odd_dir_note : subroutine {
      : match "se _;sw _;ne _;nw _" {
         : print "You don't need to use diagonal directions. Only the four main cardinal directions, and (at the start) up/down." ;
         : done ;
      }
      : mask {
         : if (is_at "r9" || is_at "r0") {
            : match "d _;u _" {
               : return ;
            }
         }
      }
      : match "u _;d _;enter _;in _;exit _;out _" {
         : print "Only the four main cardinal directions are used here, and (at the start) up/down." ;
         : done ;
      }
   }
}

themes {
   my_theme : theme {
      status_bar {
         : header_text ;
         : dynamic_text "my_score" ;
      }
      theme_settings {
         parser_delay  = 0
      }
      colors {
         status_bar_pen   = 15
         status_bar_paper = #222
      }
      system_messages {

   i_cant_do_that = That's a valid command, but not right here and now.
   not_present = You can't see ${entity} here.
   ask_new_game                                   = Would you like to restart {dadc}?
   ask_quit                                       = Do you wish to quit {dadc}?
   invalid_choice                                 = {yn_or_12_or_14}
   post_quit = I hope you enjoyed the experience. Pressing {key_enter} will restart {dadc}.
   unknown_verb                                   = {custom_unknown_verb_error}
   you_cant_go_that_direction                     = {exits_err}
   you_see_nothing_special = {nospecial_custom}
   you_see_nothing_special_2 = {nospecial_custom}
      }
   }
}

## Print the objective when the game starts

on_startup {
   : print "{dadc}: an {ecomp} Petite Mort 2025 entry.";
   : if (won_yet) {
      : print "Thanks for replaying, but this is a reminder to look at the other {ecomp} entries, too!" ;
   }
   : press_any_key ;
   : clear_screen;
}

## Execute this every time a player moves or redescribes a location

on_describe {
}

## Test VERB NOUN that the player types and executes conditional actions

on_command {
   : gosub "check_options" ;
   : gosub "odd_dir_note" ;
   : match "z _;wait _" {
      : print "\"Loaf, right? Lo, fright!\"" ;
      : if (!wait_yet) {
         : print "{one_time}This is just a silly general response. Waiting gives no penalty or benefit." ;
         : set_true "wait_yet" ;
      }
   }
   : match "about _" {
      : print "{dadc} was written for {ecomp} Petite Mort 2025." ;
      : print "I used Python scripts to generate a lot of the code to keep the development time under 4 hours." ;
      : print "I'm grateful to the organizers for not having image creation time count against these four hours." ;
      : print "{dadc} has the same mechanic as two games I wrote in Inform 7: {g_wp} and {g_ut}." ;
      : print "{dadc} is meant to be a fairly straightforward game with ten rooms and twelve points to score." ;
      : print "Every point scoring command is an unusual verb, which it is indicated by the location, or something in the location." ;
      : print "Some text is color-coded. <Green<#0f0>> is a clickable link, and <Orange<#f80>> or purple indicates a verb you can use. <Lavender<#88f>> text clues what to focus on." ;
   }
   : match "credits _;credit _" {
      : print "Thanks to the administrators Ruber Eaglenest and Alyshkalia for holding {ecomp}, as well as former administrators like JJ Guest and Duncan Bowsman." ;
      : print "Thanks to Chris Ainsley for creating Adventuron." ;
      : print "I had no time for testers, alas, but if you find a bug, you can get your name here!" ;
   }
   : match "help _;hint _;hints _" {
      : if (!point_glow_bold) {
         : cycle key = "help_first" predictable_order = "true" skip_interval = "0" {
            : print "The inital puzzle is the only one that has a specific solution. You can get hints from {tats_hint}." ;
            : print "The globe (old) could be brighter. You need a combination of two words." ;
            : print "The game title, {dadc}, is an example." ;
            : print "It's two words strung together with the same pronunciation. Do this with the globe." ;
            : print "{gb_done}. (The hints will cycle now.)" ;
         }
         : done ;
      }
      : if (!me_x_yet) {
         : print "There are no specific hints now you've gotten past the first puzzle, but {xme} will give you a hint item which may be intuitive, but if not, come back here for an explanation." ;
      } : else {
         : cycle key = "help_general" predictable_order = "true" skip_interval = "0" {
            : print "Ahead is an explanation of {xtats}, which gives a number that clues what you need to do in the current room. Note that it doesn't track whether or not you're ready to, though you can still guess, and {vm_think} will hold it for later." ;
            : print "The number 0 means there is nothing else left to do." ;
            : print "A two-digit number tells you something about the two words you need. I didn't make it too out-there, I hope." ;
            : print "The tens digit is the length of the first word, and the ones digit is the length of the second." ;
            : print "So, for instance, using the tats for the first puzzle would give 44, as each of {gb_done} has four letters." ;
            : print "First words range from 1 to 6 letters. Second words range from 2 to 7. This is the final clue. The clues will now cycle." ;
         }
      }
      : print "Fill in later." ;
   }
   : match "history _" {
      : print "The first release of {dadc} was October 30, 2025 ,for {ecomp} Petite Mort." ;
   }
   : match "score _" {
      : print "You've currently scored {score} of {max_score} total points. There are no bonus points." ;
      : if (!warn_score_header) {
         : print "{one_time}This is tracked in the upper left." ;
         : set_true "warn_score_header" ;
      }
   }
   : match "think _" {
      : if (!think_any) {
         : print "You haven't had any good ideas you weren't able to execute yet." ;
         : done ;
      }
      : print "You reflect on what you wanted to try, but you weren't prepared properly to go through it them." ;
      : if (think_scam_pill) {
         : print "You can {t_scam_pill} {once_scam_pill} you have the verbal skills to impress the scamp, ill." ;
      }
      : if (think_aid_route) {
         : print "You can {t_aid_route} {once_aid_route} you are able to help with A Drought." ;
      }
      : if (think_k_vroom) {
         : print "You can {t_k_vroom} {once_k_vroom} you have the motivation to look around Cave Room." ;
      }
      : if (think_why_trains) {
         : print "You can {t_why_trains} {once_why_trains} you have something to tame the wight." ;
      }
      : if (think_wake_up) {
         : print "You can {t_wake_up} {once_wake_up} you've defeated the wight." ;
      }
   }
   : match "verbs _;verb _" {
      : print "To complete {dadc}, you only need the four compass directions (well, the exit from the first room is up) and the twelve special commands clued by descriptions." ;
      : print "There are also metaverbs: {vm_about} gives general information, {vm_credits} gives credits, and {vm_versions} shows release dates of versions." ;
      : print "Finally, there is an option: {hone_aye} blocks off exits to done rooms and what is behind them, while {ho_nigh} lets you traverse freely." ;
   }
   : match "take _;drop _" {
      : print "You don't need to TAKE or DROP anything here. It's all done for you." ;
      : done ;
   }
   : match "x me;x myself" {
      : if (!me_x_yet) {
         : print "Weird. You see some numbers on your arm that seem to morph a bit. Perhaps they can help in some way. Let's call them fey stats/phase-tats." ;
         : pocket "phase_tats" ;
         : set_true "me_x_yet" ;
      } : else {
         : print "Nothing on you but the tats which can give hints." ;
      }
      : done ;
   }
   : if (me_x_yet) {
      : match "_ tats;_ fey;_ phase;_ stats" {
         : print "The tats swirl and form a number: {tats_number}." ;
         : done ;
      }
   }
}

on_tick {
   : if (!showed_first_note) {
      : print "{one_time}{vm_about} will give general game information. {vm_verbs} will describe {dadc}'s stripped-down parser." ;
      : set_true "showed_first_note" ;
   }
}

on_render {
   : if (!show_overlay) {
      : done ;
   }
   : if (is_at "r7" && !point_k_vroom) {
      : overlay "i_tool" x="107" y="14" ;
	  : done ;
   }
   : if (!indoors) {
      : if (score == 1) {
         : overlay "p_1" x="0" y="0" ;
      } : else_if (score == 2) {
         : overlay "p_2" x="0" y="0" ;
      } : else_if (score == 3) {
         : overlay "p_3" x="0" y="0" ;
      } : else_if (score == 4) {
         : overlay "p_4" x="0" y="0" ;
      } : else_if (score == 5) {
         : overlay "p_5" x="0" y="0" ;
      } : else_if (score == 6) {
         : overlay "p_6" x="0" y="0" ;
      } : else_if (score ==7) {
         : overlay "p_7" x="0" y="0" ;
      } : else_if (score == 8) {
         : overlay "p_8" x="0" y="0" ;
      } : else_if (score == 9) {
         : overlay "p_9" x="0" y="0" ;
      } : else_if (score == 10) {
         : overlay "p_10" x="0" y="0" ;
      } : else_if (score >= 11) {
         : overlay "p_11" x="0" y="0" ;
      }
      : if (is_at "r1") {
         : overlay "r1_1" x="0" y="0" ;
      } : else_if (is_at "r3") {
         : if (point_whee_zoos) {
            : overlay "r3_2" x="0" y="0" ;
         } : else {
            : overlay "r3_1" x="0" y="0" ;
         }
      } : else_if (is_at "r4") {
         : overlay "r4_1" x="0" y="0" ;
      } : else_if (is_at "r5") {
         : overlay "r5_1" x="0" y="0" ;
         : if (!point_scam_pill) {
            : overlay "s_scamp" x="122" y="22" ;
         }
      } : else_if (is_at "r6") {
         : if (point_aid_route) {
            : overlay "r6_2" x="0" y="0" ;
         } : else {
            : overlay "r6_1" x="0" y="0" ;
         }
         : if (point_whee_zoos) {
            : overlay "r6_zoos" x="0" y="0" ;
         } : else {
            : overlay "r6_ooze" x="0" y="0" ;
         }
      } : else_if (is_at "r8") {
         : overlay "r8_1" x="0" y="0" ;
      } : else_if (is_at "r9") {
         : if (point_why_trains) {
            : overlay "r9_2" x="0" y="0" ;
         } : else {
            : overlay "r9_1" x="0" y="0" ;
         }
      }
   }
}

assets {
   graphics {
      r0_graphic : dynamic_graphic {( point_glow_bold ? "r0_2" : "r0_1" )} ;
      r0_1 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAA8BAMAAAB7k3k3AAAAFVBMVEUAAAAAwACmyvDAYAAAAMCAgID//wC4ziU5AAAC2ElEQVR4Xu3ZQY6jMBAF0BItH6Akn8BScgGm92PJ7JFILhBpcv8jzNhYfMdgg4072cxftdjU0y+AhtD9w6kF/AdM/fdHAVN/7z8JsNOnAxWMRPQjANd/f2g+derSEID5rgJjM2TmO4ACoQUA5f8yPolyfZRS1+efZgB0fzNLUv272PnPpIDqCzDIkCmAFARtAJifE9CSbgY8WwGmlwWw3F7C+AJ4WMCfRoBvzNesmc2mgIKoq3ratAH04QICwLBRAM7CKyo4CZiWAjRLALQ06wKwg0f6LKDqApjlrHB/sxniAhA1nwWPx3kALgFf/lyAjAAUA67qamu4bF6tomIDbOOqnwGSWaYBnVIOoFTqdlF6DWo3H7EARgXjCrAEHaysh7roUYDETcDtgGUSQArJAkiUbSBo4QVAGUDcAZUIsAGXCMBDEtCFgiyARAGAsQIOASMVVEBxjp0CPuF8wyYLQPIAOvAciAtgqVkeB1zyAHEYgAKsQrNMA7oCAIk9gAEgiDQGrR7fAW3kKECGAMsZ0oCuBCB2AFrHAHcAgD3BZQdAewBfwct8AEbaTAlA5AF+Iur3heQBVACgPYBhaXQw3ycPoAKAyN4J8RjGAgAYAUhF7AJoD2B4C/CbkJ8GoAIA5JsAZGy2AHYFjQAiCSCieSp2sACWcxBj2gLGL6e7OQDLNcAn7vAsANIvZ/MA3AkASKQBgDzAym5+JgQagLxAeMusygDINQ6JZ024E7nI6F+yZEax+daSA4Tn0rigIgAnAflQTUT4arx6IkcbaM8Q0athDEABjQhx+z4TnofRExmARgQBpQA53oFZgg00EOy8m6ECGQCGcwBR8HaK68AEOQco/UJxWwP6E4CKbzQOIMMCpnoAOCUV6FeAldUBROVnKv2ygX+mSoCo/lIaAoZ6QP23Yi2D+WWA9l/L3whABRDg6HsA+LEG/ePgOwBTn6ilItTqV8PpXpe/PWpq7nkcXCUAAAAASUVORK5CYII=" ;
      r0_2 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAA8AgMAAAD004yXAAAADFBMVEUAAAAAQABAIAAAAECkMZGDAAABl0lEQVR4Xt3XPWoDMRAFYLHbBAezV3C5uE8ZfIpBjUFXcONae5QtcwyRO4i9hhthCBYv+jPuUjx1EQhcfezME9ZI/e81fHUCx10nsA5LF7Bb1NoFpA7ME+BYIH//OwDQFaR9ysCNBOa0kdeDBFIFUwbYLgy1gmDZGt6UGgHvDdvGtVQQCuDIEE9RF2C7kSEiaHiLIA+uBQreIAB3CpiVGkUMtgRcNQEclNqLAMiAOCqED9HQWbjKhQghAwLJQGCAtL2IacCZBaSUIASwKyGImFKBMcQxqIAFoL3lAQAwiJoBpicA3MECugICRwB734AoJBBqCPAkMMXWghwGBUDHeg7TcsRJnLAhL88DoReI9gloDkAvEM2ziVoRwIgothcQAOCBdhQjBSxKZUCzf2mqAdIDnBLQ2njhLucX4KirbYqthCiOnC8aAM1e776mgDM5IiGI4ee0NcfQgB8GmEsMtgDf5KA6xgYMCzllfQrqrLuwk2oFHAfMaW8tg6V3Wl/Y98KYgfKTPAmqvljIx9fx1Y7eZ+PhD+AXExSOh/4QrGsAAAAASUVORK5CYII=" ;

      r1_1 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAD1BMVEX/AP8A//+lKirStIz///8lByWRAAAAAXRSTlMAQObYZgAAAedJREFUeF7FltGJwzAQRBNcgUAFHHYDwusGAuq/pjuO8z3inZUQAmc+IzL7NLMKedynZ/3Tq57KtX4CIENyK0A6x34K4JybaACAzzQwC7DY7ApMApjZWAMA0MXEHe1X4wDvJBN3tDECLk4DPYCFAerwTyMrwGAAMCw65BIFcGoUIGsARjXvyCEaA6gOAMMAoDQDgLyl3KtApKkGANclWBoAVIGhNzIkALoEZkU2kMQzxE/PUPsZE2BZ5AooAOWzGTLhHhPg2AdwfsxYLSYwJBkdVarILaEOe9nXOGITKq3lyU0A6WNmbwQ9AIYJt2cTYL34kMq6OSsOnYo6LFEDNZ8A5xx8sFk1AGCCwC4iAA1g5gi4xr7JDmz9UVCCwko1aqA+GIQKOTLGLg3sAqLIclhBCcAgVP59dtUBp0TH95x0AwkAHwE4uyG1g4TgXMB6VqEMADOFD5b7l3tnLgS9nXoFAACe3BWAOQBCgMe8jjYA8KShtOqHzlAIYgAEAASySSLioWvFNYjoAUBbFACflh7A+UC3KIIUATgQHTMNjMRwXP6RotwDIP8B+RjDBlIPQLcynMERNJBUAvtcABA4AH5+KKQNgNekDt1Aqh0AApiVbOCVJYBCmtblDYDzsHskVzDfDpBdA/UbQaTBRJ/1JGoAAAAASUVORK5CYII=" ;

      r2_graphic : dynamic_graphic {( point_reek_odor ? "r2_3" : point_broke_ode ? "r2_2" : "r2_1" )} ;
      r2_1 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAElBMVEUAAAAAAICAAACAgID/AAD///95hLHsAAABi0lEQVR4XtSUQU7EMAxFfxj9fUzFHsEFWswBWHAAS+D7X4VMphR1BGpoTSues8jy6Uk29JqTao8LGk6v13wv4BXTCib2EzAanaMAqw3dbUeBypECLGP/rcDz6xcBBcz5WwGfeI/cgnaBN/2czQJGOHFgAXM4uaYAcAop4LB1BQAGFbBVBXoAIQW4soAlwbFb4HcxWwDC5gVQWC4AZPBPCpi3XMIXIAMhlxDErACrwBKolIbhBcz3FTAYZlvAJoEBlRRfwHxR4KEgGWfktvy3CeDCJEBvKPA4SKoBkjxtLDCHbt4m0PVSyBouwFYBqQW6aAHzVoGMM+ECbBRQHQtorAC8WWCQMxoswGaB0f9IAZEk3UYBrOUeEKTyMm7wE4sCPT6KI4MTAIEYCC6IBQRICfbjCdN/KyJ+XMAAHsS5AjI3y1c2iHG95OANLbWAVmYECHIkhQC7CgEJ5gSSpBYA+U2rP8tIgsCpd5DVbxHwHWTfb8EjyL7fyK6HgEQ/6L7t9ft3kNfv30HiV3QC62CCUBmIgHMAAAAASUVORK5CYII=" ;
      r2_2 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAHlBMVEUAAACAAAAAgAAAAICAQAD/5bSAgID/AAAAAP/////dlWwQAAABpklEQVR4XsSUQUrEQBBFv0QHeqeAHmBOIDRzg2zcCp11BKZm60a8gECWxTAkqdta9jQRgpLEtFOPT8jy8Yv+oDEbohpnKDs1jflZQCJMEQxcUADQJAEXbfTLFxRwrLEUENaYNiCahQKH92/WCrCDZqmADHQ2An3T0qk8blvqcj3D5Q2U5ZN+jQRa6j+Aa+qbzmIHYgMnFYgNWOzAQa9fA6DjtrPYgdgAFx6xAZMdaPX6YfccX0H+ZwhlugHgEe5fdoBlxhK+vaoAoEuY/xm6SQElIKIdZhdgmSNQJYEQsgs4WdDATYXcAiyTAnfKfRL4+l8ngDODgGa6gQeidAJ6WdfACCcsxgJupkCqjnILsBg34IwFIGJ8gvkCtK82+2Ap4H3hd9U6AfyVW8Cj0ARc4TcmBWp8FkfGNgjFQBRzhcQIzHGiuC1o6Rjpo1Te9gvRcEVSEClxBojv2X+5abTPuz/f9uAyFuDqjIBhttS+gAcDAdA5gTQdCyh0BF44S0vDsDLuQFl/iUDtQDl/CXUEyvkLOfgRADfA9++6/voOlPU3dODhVjgBwAKZz0it0s4AAAAASUVORK5CYII=" ;
      r2_3 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAFVBMVEUAAAAAAIAA/wCAAACAgID/AAD///9IsYhYAAAB0klEQVR4XsSVQW6DMBBFv9vIa6yiHiDiAJWaAxA63XfD3otm7n+EDnZiJDStGzGExxdi+fRlf0BLDkQ9MmROT0t0AU5ESqDwQAFAchXwPCHv+EABHyV7CnCU7NoAS+4U+Bxn1gpED4kqMKhJAly4bChwVJMEvun2XGyuoSrQqak0YCgwdGpKA8BBacBwBwY9pQHAlwbsd6DeQA8gN2C/A/VDyOLoAmwaYMm911AaIH6d3ltcQwj1HQAa+E12IHK9gXH8mgQgS2i/A74IdHoSSEiH5gKRdxbws4CexBkJZy2QC6hM8bsQGkyEF/leJ4BMEZBwdYhO5+AgOBc+1jWwwHOcGznqyQJtH4SGzAX8LNCpuQkECK61Foj83wYaTJgL5ALqZ4Do2gDZCoAT1Z+RCJzDBBkL5ALqO3Aq/jsKhOBCu1IAf/OkR3gDApykwTN+oyrQ46c4MsZhEAaC4BQRvZt7AAVPyHswSPv/J+AoRBdL5ixRmLntPd5VzNxO4S2l/DnTrit4xQJM6rA0cwooybIpENBKIADqsbXzE7BysYAEDQFv/94CJ9mUyjn9Hajav0soEO+Af38kXgL+/bGs/AmAHoDv23X743egbn/8DqBH4QB2mKmOBg6NugAAAABJRU5ErkJggg==" ;

      r3_1 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAgMAAABslMwaAAAADFBMVEUAgAAA/4DAwMD/AP/xfy0UAAACgElEQVR4XtTTMY6FIBAGYG/qUTjK9kMxN3icYkNpj4UVMcHALIOC4DPq7qt2EhOb/xtnwI4+rH8NKH5WAGrAERn5AAjKrYCT7qUqwKgA8ASgZQXGKNQdQRkAlbtcA4F3gJFxL1AZBoQMBJD3gMN1CxlwwIWJYuliBwsP0S3IGhbAJEDmN7w4hZCAqTqUEHOwVv4UeApIBhyoAFtx/noGDKoC0tQG0EGuW2AkrAAzJQDMc2ChyUVgJOFZ2AD4FZCO8QNgJkEdMWCJ1B8AT18boEnsADZOCfgjMMfowMBgaaB+ByicA/4d6HUC5ggM5RpjM4qsANECmqMM6AKEquXbCjz1cw1wRFsG5gxwCnNLU/IFGGwD9DHqj0COl3FqYG63IApgC2D2jqHpb0UCRA1GQK+Az0BT7Y/4zQA1QHxEAvw5YCQ1/U4AuwF8H3q6qd6TPgI6Kj91jjuuHCEQRQtrSF7k4LEJrwLvgKAPksk7oPdTuZOWhlqlS4P64+fxUbd0dcU9ICJBpEiWD1PkDdGgiHwP/uVZJegE73zreJ39/2a8E3iv+PDzISUcTjAkHwJPkjwMirxlXzzEh+RDIFRbpEzBRSLL/wl3gTCKxK+CyHH2FKWb8hF8InGZZ39lCS54zIU9X7vlmDGTBJCLMJtLfQo+bBS5AZBn0OVvQaw3pQs+X+GHjUUuEqCUV1DyJfCqdi9uzIs3G3cvbUehJAb7fqoji6SGZvlKbDaYdXIj6FpXgLWx9vZbJsBPNl3LP3uqHS8FiQCj9w571bVtNgehKWC93wTplRPVmIIAhQmNqqhWs+c8bAPYqacgAOJwCSIXVTfoitl8gpuUpnAKIp0sfwCCibQ7+fIk9QAAAABJRU5ErkJggg==" ;
      r3_2 : base64_png "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" ;

      r4_1 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAGFBMVEX/AP8AAAAAgACAQACAgIDAwMD/AAD///+JPPJHAAAAAXRSTlMAQObYZgAAAaRJREFUeF7tlL1qwzAURts3yIewtTtDZ1WmLxCXzoZqbyios0roff1Klq7jWMSGBpMOOshYGJJ7OP55+G8UCoVCoVAoFAo2cr/5X0R+2Y+7zY8CX5slsB/L8ykJ/GyU4BG7lf68NkoA2i3PHwW2SfAocwHN2IGal9U30Xh0BohE3CkgbjKB2q/bBZ6J6DsTUHIUGHcLBQAI/UeeiGifCxALqFPXuUzgiDoKAF5AVb3BPCGuCCgIYBogCWBEBAEHGQXkQes3MRcAMAgcAX9Spje9brvAgceEJvx/6eKwUVbUx0kAFpDERAFaEHixMEmg6mv7GQVejTHvo0DVe4HKePy505E2E3huAsMgCQkX1oWAOoXfORZgYDCZowyqJMCO/sKkQMcc5regwSjgcRSOKIBlAWBSWvkAZwHAHwrgAjOBCGs0FwXcuQARLQkoCDYZOhgDFghOiBrnArkACen4FuynBSgKOEf5M3CVYUybElc9Fx4LtCygVwScP1hA5gLr8GOR4AKaA1x7GbO3YOE7sIYCxKzAOvl3IJ3zL+E6gM4K3ILiVL9QwXgKZGmCkgAAAABJRU5ErkJggg==" ;

      r5_1 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAJFBMVEX/AP8AAAAAgAAzMzN4PACAQACAgICWZDK0jGTAwMDStJb/AAA992e/AAAAAXRSTlMAQObYZgAAApBJREFUeF7Uk71qwzAUha+Hm0WLRTCE9DEumfwSMl36s/c9MhTyAh1CpwxdMrkYAkYv18g6UmVqOoii0AM2SMv59EmX/nNWLz63a7dTLjdhWLn245R3x1BePtrBcCksQeH09poRFqhgnkcv3w5va7FhYahUWEH8II9rEYsVU6kYVA4yAcjoAfpSCpjQKABoPU/PpQTQGATsjmuJCnoyhQQo//C/ATASxIUEKN8nEaD1RPTnCjqdJgggFQTIvQcQC4CoQKdpsmVvz0maGgIAIAlAC4CgoOoOSfa5YswCABMA7AxgBAAvAnCmgCrtP32cIIAsZkB2AgCZAPqoYPOwSQnqLAVsfgDghJ9a6zv3a7QGgNXXOABeBOAcAkOzG9ien2q3CQCrZwCt2+uDour1sJ/dQc6AMi0AMAUA9+kuAkgE4CWA3wb0q5g6SHEQCKIw3FewURLIqn+o1Zwi4BwgxTRzDoHBK+Qa2eaUAzZj7KooBCLzlor2pw8eK1FS1cD9fslM+WgegDlTLZSQu+u16iAirGQNIFjATckz4NQYwGkByMjRAtBNQL04AAp1A7eokCtA1zwFZJB0rDsAAaj36QGQw7hIFwEsIPpvENYiJAOYki79ImedAeoBtoHGnLcNUGhsBx4gfwBJ4yLDz1AA5nd5gK4DbK0F0H61S0HUAhC1AP96eRngn/cA0QmgVA0cxu/ojtPXAf4F6bM/Vx0gEBCeAnT7LA/avi1PASgBpW5gHC/ZP/46wH9C7vq+7gAhCBYwlMV5L6DsU2sBaFDbwFAW590p+9TaDiRgARFlpwjJAgi2gbI4+0ShsR0Etzi7Avw+BbsY+wL8acEOxs4Ad1xwi7Nr/MAEe2Hf+H0K/C+AX6IV9h+o1YlPAAAAAElFTkSuQmCC" ;

      r6_2 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAKlBMVEX/AP8AAAAAAMAAgACAAMCAIACAQACAgIDAwMD8zMT/AAD/gAD//wD////24vsKAAAAAXRSTlMAQObYZgAAAoJJREFUeF7M07FqxDAMgGEJ00KhQzSGS97hwPQ9CsV7pzxPbynoMTp3qXctfgC/S53UELBCrnc9J9Xwr/oQNvzvsfZYGfC1vt5WFoisAYydpub6dYC1VU8gsitAZFeAiPe+k67zuwAkjR+HqAQYa6sDZJz5AvrZ73iBvLAAQJ03QN6XFzDFRlPxEzxKni0Aw/C61PMAeHLuBvvvmd+XCnAWAM65578C8OF0YtSdcNsAmBl1s28TQMuomwGNBhxvDWi5RVUFmD8+XAlAylMCiFpU/RXgLgEuuHX8maAeITGqLgKMcy8WrgaEPkSKoQQA8xvqaoDe6C4ExH6cAgANfkCT6qeGqZRaA0C9vgDg4ZNSOxnbx7HzQ0mA79LKGLVhIIiiZ5DXGMeJC+sGw6CIlAbdwPgAJrC9UOHanfpUKt2qc61T+EYZDSKf9Xp3HfsVHxYV8zQMfAZciID7wvM4wS7HP+rrWrmyy/swDIY/pAENr+VGDGeCYYVNSmAXFSiPoJ6O8EaABuFCWsGk3ykbeUBgf1egcf8e1NnECwI6EC/F+1kI+dTsYO13PEMCOAEYYdt4eZAj8Cmtl0hXoHAE9hP+woPz2RGgL2k9iud/BDC0CcxvbgWk9SiersC0cVDgCYEQOE8IvHUUS19A4CDJ+Z6AtB5F0xUoEgJlYr4vIK1HsbwrsHtuBQwgIK1H8YQAru4ZAQaAuOt+KJ4qgAUkVhA8/gCGLmwkT5oHzbPmVnMjmRZI3wCHIOlByWU75sKOuerHnFdjznJJFQC4wVfnoweXbdsaXlhrDa/6vjc8r6rK8CzPc2wgTfnY9fs11AonssKBeuFMlbClXNhAIDk+BL8o8AsIwFM1vFo8bAAAAABJRU5ErkJggg==" ;
      r6_1 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAD1BMVEX/AP8AAACAIACAgID///+zIdTbAAAAAXRSTlMAQObYZgAAAk9JREFUeF7s0NEJACAQw1Ad4eAWKnT/mUR0AhH6kzdByPgGAAAAs65YgA/FAtRyWcEA95YMqH44sAqrAhvJgRA2LRh9A+YquL0Kvv+mXhgPvLTa3ChhJiyKDZhsZujKRDCyFzKZcttG/njZwUhF/8z6/vunK5DICkhb7jtYZn7SjgOEAJO9Ex3P5mG7BNqBdn7JZQJXhDedSyD6TlHGEID2OMkG904kgGgiJExlCbySHeDslwC8CBRWGcAEXM9oFOcrdidpvtAOBSIIoiLRcbnJciryvr5dMQQyA3ApGa5EqDCi2F1GFgGAeQn4bur9BEAEtgl+el8M1x4+1FbW+QIRVJIKACOPswdxe0XfFhPe5PYRv4Jhwbl1QCOSgTINkSGwOp+0EwljAxc7VoP/g74+4L9aNCZAuLVMQlfc+upomAO6TbqsTiFaa7EEntfrZq3bgzICv83xcBAu0lH2S8DnkLXg7fwNv9m7/y7wkChbHgET29+TcIjQEM0S8z3QgWW/nvH7FYWv/GKS1kR4BsDs4ju/xPGwA9t3zcl8wBK3nk/4zRSEStkvY48jGBiFS4k6RWvilA9RtGMIEL1bCsrskUCLhx05A6hn8Uhf5aaPhBxnGxA5mLEDyVAetT6Kf1W0X5LtPu4nIDGdQctkCRhtNUxPIE3oYQx63vf/ZIhvAZ163NrEiCSPaRuSow+TgbxP+IWOLqBrNwUdHS81ceBUSCLcqDWbhBwP+K8hqRW+ILglwFWUARy8BAw1LTRxeR9GcFlrIWfi3wgMypaZ8Q9bSScH9J8BswAAAABJRU5ErkJggg==" ;

      r6_zoos : base64_png "iVBORw0KGgoAAAANSUhEUgAAABEAAAAMAgMAAAD5S74sAAAACVBMVEX/AP8AAAD///9YpImpAAAAAXRSTlMAQObYZgAAADBJREFUCFtjCAUCB4asVatWOTCkTp06zYEhc+bMWQ4MaTNnLoOJQGQhKhkYQBiDBAB4aBM2fcIEkQAAAABJRU5ErkJggg==" ;
      r6_ooze : base64_png "iVBORw0KGgoAAAANSUhEUgAAABEAAAAMAgMAAAD5S74sAAAACVBMVEX/AP8AAAD///9YpImpAAAAAXRSTlMAQObYZgAAACtJREFUCFtjCAUCB4asVatWOTCkpqZOc2BIS8sEk2mzYCIQWYhKBgYQxiABKoQRmuYX8TsAAAAASUVORK5CYII=" ;

      r7_graphic : dynamic_graphic {( point_k_vroom ? "r7_2" : "r7_1" )} ;
      r7_1 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAgMAAABslMwaAAAACVBMVEUAAACAQADStIwviuC4AAACP0lEQVR4XpWVPY7jMAyFNQHUpOclcorVYN1sJS3IFLrB5BQ7xRzBTapMoUHMU65F0j+xZwL7IUUeIH0hnx8cR6MQaKviZGYAUsCZu0uXOfeGSzFHWVy2Q+l7QDMAusslX3tU6Yq5NovLhHryGYAylfx2roD2rZhrs7hsw8OPgGYBGN21uq8rpYrA7wBxKwBB9oAlAAUQfgC02QCRyFcAVgSsAUkAEiKXPrbBtZm/SsdcjwXZooKcAJLur0AUgDxGLsRlcNRbLpeuLpAo2cYICkABeAU8ly6QyBheABKIlxnk64Muxcy8LEE+ss0IAAM0TwEmrxygOAKQngCic4+DAdlZrIBogEBe4GvAK7NzLxMArUqhcly1oLE0tBZ3FI/c6+7mlQnSvSUg0FzobIIDm5zT+aINioCPgESTojvI3LnFE4+6uV5e6lzlkUaAkicd9AKc6ZUXem+Gk4EM4BWAE+DXcJjouATcPAWNMQ6Axu4CuV5AkpuNgLzUHXRc0CpbpiCAqL+KY2788sorSYKJvDURq1E1+sDA7os5rgHvun8gbSLCmN5vDfzffGFe66brJgnCWTEtug3SEFAz9wawDh55mzyNbzUF2A542gj4JEo4B1g1I2/UXQHNCLAR/vBWASW0N4gzkCeKp82AD0r18hwQSEq/OQS95g2w6xlYCBQUMgGQd0iaYFUeFPcAPjSANAH2RGBt9guAtWh7m8MjAHmXYPpnMv1l3hkCapX3R2AhmBztboGFsASceJ+8Af4DlcmAHg0AuTEAAAAASUVORK5CYII=" ;
      r7_2 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAgMAAABslMwaAAAACVBMVEUAAACAQADStIwviuC4AAACGElEQVR4XpWVQW7jMAxF1QDcdM9L9BTVYLyZFTXgv8900Xuku0CnnIJfIBEbM7DfykKgZ/uJSRoS17joAKAg7yADTxiSFOSuUa662FKg6TsKtrR7SktAlXP5P4HnI2pKIWuVn/xLsFEwsoZlHoVjYMC4PAgsBUpP1jCBIwShcOVyL/AQdGaixxH0LVSxVgPC54BCj4JBgXIDu0l4uU8c6LAQCFoIBgNS6BnMNa4Ay4MYwOYaIfjGrhR4CISCOk1WLGiRCLEcQgHiZhs0A4AF7SgIfQ+3A70EGoLsQI1jD+XCC4WlwLEXSAmsNS1BZd7gQIMtQYdQvijBjzlbewGh15WJFC1OlFmoP2Cv85tHayVgXtsJdtG9gdzmojWhcT2oqz8LBgprt/Xc/jaTe/tGRo6YIwU0Fzdu0CjwzAe/k4xAgVDgSN4n+QBe94K7oDOjUbDOA5HkG41u5K4+9zyUIZSjvJpqCIx39ew2X/INCuGkCtApyHobD0xr/3zUG1QEvn8HLASa9X4y+J9Z3OeRO7DCxzFyMFe6EzCCs7lQwBlk8DMI6leNAgM4Muf4AoY/CTiaNk/yoGArATP+mmdRDF+/IG2JBLC304JPjChQAnQO/ekI3CYl4BlciIBOSQl8XoCTwFFewK4IPhlglOBSAk6z7AR5BmenuZeACS6h9c+0+D3nxQjOUb6aoCKQhpqCixFIu96QCMhfrRBUznZeA6AAAAAASUVORK5CYII=" ;

      r8_1 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAElBMVEX/AP8AAAAAgACAQACAgED///9w89uMAAAAAXRSTlMAQObYZgAAAnxJREFUeF6tltGR6jAMRUkHuRENxB1otgJm9nXA9t/KW7JBB+GAPST3Ix/22Pf4ylicsmRflcaYHbQMuH29k1gw3Mc8Zl2nNxrwR3rcb/EGwBXITACgcIXPmUY4bMjZbz28VvOQAZCI13Eg4ctiAXILZPJxAsUfAq8WBC/yvgBcILOdiFpJDwAKgiGfX9aKQMk/JGYtAFxJRmp5hZO/iRI1riCxEelgGBgB5AiUV6SNnBK1KoCTB/Ko9GvaBEAa7gFwKIsEWwARdSATch8AK8RQfDoAPFfCy69UOaCKT7cVUTMyddsGGJTuINzGdrP1A/gEcjxeHgR/buOjv4/cwVQBtivqB1AJZOJUfP/c8pOt8aStCuBfZj1ZzFo1PeHdBiBwgiCCQY+VWMZEAEp1U1k1E7bH2FRWLcMAEZrjTH7iSUzZ4wvIVLLCIgTe8xhH517VbYmprQC87BDN0+11n90KAGkPgOgQGwb+ogIZZ9oDMNsK4GRBf/CRCryUl12y1Vz5HqS2ZG8BPg+Aa2g3BsIFxekAtajA7hqI3lb9e2sFoLJTtEQAYPGHACQ7NAAiQPVPYXmAQdBhAaDKNPe5XAHXoQEQAbFX13D7EcL/SAJQoAEArl7/WWvIUyeBpWMaANsErla4Fy06t4KScWaeJRcAJA9muwvN36ualUoAtDkLgO1WUVo6XxddShsAEyd+AHCFoANg/vd9vf4QQAOAHJYPl5BJCLoBfrUXgGHUDfDzIYAdA8Ad7AbgCwBISdNxADOXkMYMwCL7pA+db/6Xno4U3uLADQCVtuYIoCHdIxA+LYCuPnAmgHYNyL0GqOXHAhBwN0CPvxb1ELwE+A+Jq+tri1Cf0QAAAABJRU5ErkJggg==" ;

      r9_1 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAG1BMVEX/AP8AAAAAAP+AQACAgADAwMDggED/AAD///+ZPK2ZAAAAAXRSTlMAQObYZgAAAVJJREFUeF7t0sFKxDAUheGT0nSdC1N0OcwrdB6g0oDbVDjMtqt5AkvXvrlJTLXu5QbUnxK6y8ch+EV51K3dRigmIsYJDj1vr1CslxjdYQDvveIE5mEjtzXgsycROSkCbtsavxl7raT0JhDe+nnlF8B/BK1YOgygNkEIAYbk3GeAtba8AFF6BZaAsZzfHnsGAPnwe1AoABIBIj3nBILmAgXghBKjqQIgjDjHmEkAqgMsjIGzZBDEgj4giDEZ4BJHHwBCDO6xBCD0ATZAugRY8r8+AAR2AFEDYBfcc+gWpFq/B53unyE3lQVOVyjVHa9HOxTApAbAN8BUAKehDqAdrj43Db4G4DhAqw0oA0huGsYqgOMTrAO4SgGMioDuAPB7qAQAMCIduoD4LRUBzRm44A8DmnT55VwApRFa/QPK3U09QBMBVRewl3S8VANYEgAZfgDwDr0eaif+Zt2bAAAAAElFTkSuQmCC" ;
      r9_2 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAG1BMVEX/AP8AAAAAgACAgICmyvDggED/AAD//wD///9NxK75AAAAAXRSTlMAQObYZgAAAilJREFUeF7tlj1u3TAQhIc30Dj2e26tnCBh/lojusBDoAMYAdQ/pFBtpNGxM4vRIgDhNmKRN1jvt3AzQ2ppGB01FJLopyKUngGIzhrQS2XI3kmnlwA5CKVnADIXYWkEbI2AtREwNgKmRsDcCKFCfwFKgwO8nJZFbUcEeH3cNrUdEeB6Xle1HRHg6W4c1XZEgOf7aVLbEQEuD/OstsMBQP+gUN0BKGeeDAegnPloOADlzLPhAJQz7wwHoJx5bzgA5cwH42+AXMEMEK5yTwDhGiESQLhGiAQQrhEiAYRrhEgA4aoQiQww2DljYJFtmBsOIFuZGw5wZZgbDiBbmRsOIFuZGw5wYZgn8h3mBbjHEpJcjFxCkpuRS0hyNXIJSY5GLiHJycglJDknMgD99R2jjEOsnk5uZIBXndzIAFed3MgATzq5kQGedXIjA1zi5AlYDA0oCOkDhjXVjHyGVDPyGVLNyGdINSOfIdWMfIZUS8CSOciB/QLkn8L8BAcH8AomQBwdgEZBpwCExT4BCvPmhy4BCoFmAw4NUOgEhYGYKS2NyK0RuTYix0bk1IicG7HV8f8P5AVkPzyAVy+7/cvy80uU5AFl+/0tSvKAsv76GiV5QBnff4ySPKBM3z9FSR5Q5h+foyQPb18Al1qjJA/gVmuU5AFca42SPIBjrVGSB3CqNUryAM61Rkke3r4AotYowMO//U17AQy9+6A6ZmjlIB07/nvddNNNN/0BMXtsliONdH0AAAAASUVORK5CYII=" ;

      # for conditional graphic outside stuff
      r_blank : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEX///+nxBvIAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;

      # item(s)
      i_coin : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAgMAAABslMwaAAAACVBMVEUAAADAwMD///8Nbde7AAAA80lEQVR4XsXWsY3DMAxG4Z9AdLUKy0WmoQr3PIB04RE0T7xBVNhTRr7g6gBkkdfzqwiQOIN9AvY1BuxmawQ4bNQCQLfRFgDsLz9wvIHmBnpVI8XmBnbIBMEcAHLOE1Y3YEDWQuYFjn+guQGKAd2Icx7A5gdkgkWARY1sCQDv3MBefjUpVL3AI7GQIOfZDzArxA/cuIqRwA0AVWoUWEhwdwJPgHkA2Q0QhCJAv/ZgWVS/tomHFU1CWpoXuMYZkrzAqYl5EOX0Ao9UZSCzH6ALkB838MQF8N0NHMSsCS1wXIU01ch512RlCz8YX3xxRn07PwHBXkr8Ji7dWZIoAAAAAElFTkSuQmCC" ;
      i_tool : base64_png "iVBORw0KGgoAAAANSUhEUgAAABwAAAAaCAYAAACkVDyJAAABDklEQVR4nL1VURaEIAgc9nUvvZl4MzsZ+7HPltowqK3p9cpURmAgEggsVK4/k4ULmRscmLwLrxJ1vJ4kcxFaZHObZW6znQ8DS0h7vrYE2zzq+ZRT2HMSiGlUf48cZASXaCxjOWfP9hVee9IfeaaRcqJ+ewkPPbRCl3OGFo2XdCpcyJOPvW+tteU9IXn4ruXwTH1Sb217ZVG5imX0NpWODJ9R6aVe2nN4FAU9f7qXFi40CqOOTOUqfUwCAYHCPdECMw8P6/Lwn5gAQCAOZeoofNbvFj5/7ZiELujtgerbEt8WUktofg//RLrysLtvxd9C5G+xEG5JoqQhQq1M/byD9PE6hAQuAKLHrTWJ7BcI3hgI2brRO8F0AAAAAElFTkSuQmCC" ;

      # scenery/npcs
      s_scamp : base64_png "iVBORw0KGgoAAAANSUhEUgAAABgAAAAUBAMAAABlm+CwAAAAFVBMVEX/AP8AAAAAgACAQADg4ID/AAD///8FXN0PAAAAAXRSTlMAQObYZgAAAG1JREFUeF5tjLENgDAMBBOxgNN4AAoWIBuEFaBPJH7/EXiJ2KbgUjin9zuRZSdpsrRWP3LURvGt2FNA7J87tLsACLldiJ6XuOQISlG+IlaHndCuIAVCUckYLKnJuoWM/yQndkbnJDITYULea+QB4qkcKgtgRU8AAAAASUVORK5CYII=" ;

      # outside graphics from darkest to lightest
      p_11 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAAPAax8/GAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
      p_10 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAAOAHcN+iAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
      p_9 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAANAhqe8OAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
      p_8 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAAMA8Hv9qAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
      p_7 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAALBsG45WAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
      p_6 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAAKBxrJ4yAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
      p_5 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAAJBXda6eAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
      p_4 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAAIBKwr76AAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
      p_3 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAAHD3f0zmAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
      p_2 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAAGDqyFyCAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
      p_1 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAAFDMEWwuAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
   }
}
