start_at = "r0"
start_theme = my_theme

#cch.py makes sure of things

game_information {
   game_name                    = Dusk, Airy, Does Carry
   game_version                 = 1.0.0
   game_shortname               = DADC
   written_by                   = Andrew Schultz
   uuid                         = 9998565c-3283-4dcd-9e5d-fafadbda5c2e
   year_of_release              = 2025
   copyright_message            = Free to distribute, voluntary payments welcome
   short_synopsis               = EctoComp 2025 Petite Mort entry, in the vein of {wp} and {ut}
}


## Defines locations in the world

strings {
   # game clue strings
   c_globe_old : string "<globe (old)<#88f>>" ;
   d_glow_bold : string "glow (bold)" ;

   # parser error stuff
   custom_unknown_verb_error : string "Nothing comes of that. {gsgr} has a reduced verb list, which you can see with {vm_verbs}, and all point-scoring commands are irregular." ;
   exits_err : dynamic_string {( is_at "r0" ? "{r0_cantgo}" :
      is_at "r1" ? "{r1_cantgo}" :
      is_at "r2" ? "{r2_cantgo}" :
      is_at "r3" ? "{r3_cantgo}" :
      is_at "r4" ? "{r4_cantgo}" :
      is_at "r5" ? "{r5_cantgo}" :
      is_at "r6" ? "{r6_cantgo}" :
      is_at "r7" ? "{r7_cantgo}" :
      is_at "r8" ? "{r8_cantgo}" :
      is_at "r9" ? "{r9_cantgo}" ?
      "You can't go that way. I should have a better message, but I don't."
      )} ;

   # basics
   my_score : string "{score}/{max_score}" ;

   r0_loc : dynamic_string {( point_glow_bold ? "Now that the globe (old) emanates a {d_glow_bold}, you can see a passage leading up." : "You can't see much here. A small {c_globe_old} gives off a very dim light. It seems to be your only hope to illuminate a way out of here. But how to operate it?" )} ;
   r0_header : dynamic_string {( point_glow_bold ? "{c_globe_old}" : "{d_glow_bold}" )} ;
   r0_cantgo : dynamic_string {( point_glow_bold ? "The only constructive way out is up." : "It's too dark to see. Bumping around is dangerous." )} ;

   r1_loc : dynamic_string {( point_glow_bold ? "" : "" )} ;
   r1_header : dynamic_string {( point_glow_bold ? "" : "" )} ;
   r1_cantgo : dynamic_string {( point_glow_bold ? "" : "" )} ;

   r2_loc : dynamic_string {( point_glow_bold ? "" : "" )} ;
   r2_header : dynamic_string {( point_glow_bold ? "" : "" )} ;
   r2_cantgo : dynamic_string {( point_glow_bold ? "" : "" )} ;

   r3_loc : dynamic_string {( point_glow_bold ? "" : "" )} ;
   r3_header : dynamic_string {( point_glow_bold ? "" : "" )} ;
   r3_cantgo : dynamic_string {( point_glow_bold ? "" : "" )} ;

   r4_loc : dynamic_string {( point_glow_bold ? "" : "" )} ;
   r4_header : dynamic_string {( point_glow_bold ? "" : "" )} ;
   r4_cantgo : dynamic_string {( point_glow_bold ? "" : "" )} ;

   r5_loc : dynamic_string {( point_glow_bold ? "" : "" )} ;
   r5_header : dynamic_string {( point_glow_bold ? "" : "" )} ;
   r5_cantgo : dynamic_string {( point_glow_bold ? "" : "" )} ;

   r6_loc : dynamic_string {( point_glow_bold ? "" : "" )} ;
   r6_header : dynamic_string {( point_glow_bold ? "" : "" )} ;
   r6_cantgo : dynamic_string {( point_glow_bold ? "" : "" )} ;

   r7_loc : dynamic_string {( point_glow_bold ? "" : "" )} ;
   r7_header : dynamic_string {( point_glow_bold ? "" : "" )} ;
   r7_cantgo : dynamic_string {( point_glow_bold ? "" : "" )} ;

   r8_loc : dynamic_string {( point_glow_bold ? "" : "" )} ;
   r8_header : dynamic_string {( point_glow_bold ? "" : "" )} ;
   r8_cantgo : dynamic_string {( point_glow_bold ? "" : "" )} ;

   r9_loc : dynamic_string {( point_glow_bold ? "" : "" )} ;
   r9_header : dynamic_string {( point_glow_bold ? "" : "" )} ;
   r9_cantgo : dynamic_string {( point_glow_bold ? "" : "" )} ;
}

integers {
   score : integer "0" ;
   max_score : integer "11" ;
}

booleans {
   # game state (noncritical)
   warn_score_header : boolean "false" ;
   wait_yet : boolean "false" ;

   # scoring
   point_glow_bold : boolean "false" ;

   # rendering
   show_overlay : boolean "false" ;
}

vocabulary {
}

locations {
   r0 : location "{r0_loc}" header="{r0_header}" graphic="r0_graphic" {
      on_command {
         : match "glow bold" {
            : if (point_glow_bold) {
               : print "The globe is already giving light!" ;
            }
            : print "The globe begins to glow more boldly. You can see your way around. There are two exits. One's probably the way you came. The other leads to real, natural light, aboveground!" ;
            : set_true "point_glow_bold" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_glow_bold) {
            : match "glow _;_ bold" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
   r1 : location {
   }
   r2 : location {
   }
   r3 : location {
   }
   r4 : location {
   }
   r5 : location {
   }
   r6 : location {
   }
   r7 : location {
   }
   r8 : location {
   }
   r9 : location {
   }
}

# Defines things in the world (scenery cannot be carried)

objects {
   dump_ale : object "Dumb-Pale-Dump Ale" ;
}

connections {
   from, direction, to = [
   r0, up, r9
   r9, north, r8
   r9, west, r5
   r9, east, r6
   r5, west, r1
   r6, east, r4
   r5, north, r2
   r6, north, r3
   ]
}

barriers {
   block_init : block {
      location = r9
      block_when_not = point_glow_bold
      message = There will be a way up when you have a light source.
   }
}

subroutines {
   add_point : subroutine {
      : print "<Your score has just gone up by a point!<#ff0>>" ;
	  : increment "score" ;
	  : update_graphic ;
   }
   say_half : subroutine {
      : print "You got half right." ;
   }
}

themes {
   my_theme : theme {
      status_bar {
         : header_text ;
         : dynamic_text "my_score" ;
      }
      theme_settings {
         parser_delay  = 0
      }
      colors {
         status_bar_pen   = 15
         status_bar_paper = #222
      }
      system_messages {

   i_cant_do_that = That's a valid command, but not right here and now.
   not_present = You can't see ${entity} here.
   ask_new_game                                   = Would you like to restart {cdsa}?
   ask_quit                                       = Do you wish to quit {cdsa}?
   invalid_choice                                 = {yn_or_12_or_14}
   post_quit = I hope you enjoyed the experience. Pressing {key_enter} will restart {cdsa}.
   unknown_verb                                   = {custom_unknown_verb_error}
   you_cant_go_that_direction                     = {exits_err}
   you_see_nothing_special = {nospecial_custom}
   you_see_nothing_special_2 = {nospecial_custom}
      }
   }
}

## Print the objective when the game starts

on_startup {
}

## Execute this every time a player moves or redescribes a location

on_describe {
}

## Test VERB NOUN that the player types and executes conditional actions

on_command {
   : match "z _;wait _" {
      : print "\"Loaf, right? Lo, fright!\"" ;
      : if (!wait_yet) {
         : print "{note_once}This is just a silly general response. Waiting gives no penalty or benefit." ;
         : set_true "wait_yet" ;
      }
   }
   : match "about _" {
      : print "Fill in later." ;
   }
   : match "credits _;credit _" {
      : print "Fill in later." ;
   }
   : match "help _;hint _;hints _" {
      : print "Fill in later." ;
   }
   : match "history _" {
      : print "Fill in later." ;
   }
   : match "score _" {
      : print "You've currently scored {score} of {max_score} total points. There are no bonus points." ;
      : if (!warn_score_header) {
         : print "{note_once}This is tracked in the upper left." ;
         : set_true "warn_score_header" ;
      }
   }
   : match "think _" {
      : print "Fill in later." ;
   }
   : match "verbs _;verb _" {
      : print "Fill in later." ;
   }
   : match "x me;x myself" {
      : print "Fill in later." ;
   }
}

on_tick {
}

on_render {
   : if (!show_overlay) {
      : done ;
   }
}

assets {
   graphics {
      r0_graphic : dynamic_graphic {( point_glow_bold ? "r0_after" : "r0_before" )} ;
      r0_after : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAA8BAMAAAB7k3k3AAAAFVBMVEUAAAAAwACmyvDAYAAAAMCAgID//wC4ziU5AAAC2ElEQVR4Xu3ZQY6jMBAF0BItH6Akn8BScgGm92PJ7JFILhBpcv8jzNhYfMdgg4072cxftdjU0y+AhtD9w6kF/AdM/fdHAVN/7z8JsNOnAxWMRPQjANd/f2g+derSEID5rgJjM2TmO4ACoQUA5f8yPolyfZRS1+efZgB0fzNLUv272PnPpIDqCzDIkCmAFARtAJifE9CSbgY8WwGmlwWw3F7C+AJ4WMCfRoBvzNesmc2mgIKoq3ratAH04QICwLBRAM7CKyo4CZiWAjRLALQ06wKwg0f6LKDqApjlrHB/sxniAhA1nwWPx3kALgFf/lyAjAAUA67qamu4bF6tomIDbOOqnwGSWaYBnVIOoFTqdlF6DWo3H7EARgXjCrAEHaysh7roUYDETcDtgGUSQArJAkiUbSBo4QVAGUDcAZUIsAGXCMBDEtCFgiyARAGAsQIOASMVVEBxjp0CPuF8wyYLQPIAOvAciAtgqVkeB1zyAHEYgAKsQrNMA7oCAIk9gAEgiDQGrR7fAW3kKECGAMsZ0oCuBCB2AFrHAHcAgD3BZQdAewBfwct8AEbaTAlA5AF+Iur3heQBVACgPYBhaXQw3ycPoAKAyN4J8RjGAgAYAUhF7AJoD2B4C/CbkJ8GoAIA5JsAZGy2AHYFjQAiCSCieSp2sACWcxBj2gLGL6e7OQDLNcAn7vAsANIvZ/MA3AkASKQBgDzAym5+JgQagLxAeMusygDINQ6JZ024E7nI6F+yZEax+daSA4Tn0rigIgAnAflQTUT4arx6IkcbaM8Q0athDEABjQhx+z4TnofRExmARgQBpQA53oFZgg00EOy8m6ECGQCGcwBR8HaK68AEOQco/UJxWwP6E4CKbzQOIMMCpnoAOCUV6FeAldUBROVnKv2ygX+mSoCo/lIaAoZ6QP23Yi2D+WWA9l/L3whABRDg6HsA+LEG/ePgOwBTn6ilItTqV8PpXpe/PWpq7nkcXCUAAAAASUVORK5CYII=" ;
      r0_before : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAA8AgMAAAD004yXAAAADFBMVEUAAAAAQABAIAAAAECkMZGDAAABl0lEQVR4Xt3XPWoDMRAFYLHbBAezV3C5uE8ZfIpBjUFXcONae5QtcwyRO4i9hhthCBYv+jPuUjx1EQhcfezME9ZI/e81fHUCx10nsA5LF7Bb1NoFpA7ME+BYIH//OwDQFaR9ysCNBOa0kdeDBFIFUwbYLgy1gmDZGt6UGgHvDdvGtVQQCuDIEE9RF2C7kSEiaHiLIA+uBQreIAB3CpiVGkUMtgRcNQEclNqLAMiAOCqED9HQWbjKhQghAwLJQGCAtL2IacCZBaSUIASwKyGImFKBMcQxqIAFoL3lAQAwiJoBpicA3MECugICRwB734AoJBBqCPAkMMXWghwGBUDHeg7TcsRJnLAhL88DoReI9gloDkAvEM2ziVoRwIgothcQAOCBdhQjBSxKZUCzf2mqAdIDnBLQ2njhLucX4KirbYqthCiOnC8aAM1e776mgDM5IiGI4ee0NcfQgB8GmEsMtgDf5KA6xgYMCzllfQrqrLuwk2oFHAfMaW8tg6V3Wl/Y98KYgfKTPAmqvljIx9fx1Y7eZ+PhD+AXExSOh/4QrGsAAAAASUVORK5CYII=" ;
   }
}
