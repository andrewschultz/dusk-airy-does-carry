start_at = "r0"
start_theme = my_theme

#cch.py makes sure of things

game_information {
   game_name                    = Dusk, Airy, Does Carry
   game_version                 = 1.0.0
   game_shortname               = DADC
   written_by                   = Andrew Schultz
   uuid                         = 9998565c-3283-4dcd-9e5d-fafadbda5c2e
   year_of_release              = 2025
   copyright_message            = Free to distribute, voluntary payments welcome
   short_synopsis               = EctoComp 2025 Petite Mort entry, in the vein of {g_wp} and {g_ut}
}


## Defines locations in the world

strings {
   # top level strings
   dadc : string "<Dusk, Airy, Does Carry<#ccc>>" ;
   g_wp : string "<Why Pout<#0f0>>[https://andrewschultz.itch.io/jam/why-pout]" ;
   g_ut : string "<Us Too<#0f0>>[https://andrewschultz.itch.io/jam/us-too]" ;
   l_cdsa : string "<Chez Dark Shade Ark<#0f0>>[http://andrewschultz.itch.io/chez-dark-shade-ark]" ;
   l_dadc : string "<Dusk, Airy, Does Carry<#0f0>>[http://andrewschultz.itch.io/dusk-airy-does-carry]" ;
   l_gsgr : string "<Go-Strange-Ghost Range<#0f0>>[http://andrewschultz.itch.io/go-strange-ghost-range]" ;
   ecomp : string "<EctoComp<#f80>>[https://itch.io/jam/ectocomp-2025]" ;

   # noting stuff
   one_time : string "<ONE-TIME NOTE: <#f0f>>" ;
   key_enter : string "the <ENTER<#f88>>/<RETURN<#f88>> key" ;

   # game clue strings
   gb_done : string "<GLOW BOLD<#44f>>" ; #r0
   c_globe_old : string "<globe (old)<#88f>>" ;
   d_glow_bold : string "<glow (bold)<#ccc>>" ;
   c_re_coder : string "<re-coder<#88f>>" ;
   c_dune_ice : string "<dune/ice<#88f>>" ;
   c_bro_code : string "<Bro Code<#88f>>" ;
   d_bro_code : string "<Bro Code<#ccc>>" ;
   c_blur : string "<blur, blasting<#88f>>" ;
   c_scamp_ill : string "<scamp, ill<#88f>>" ;
   c_a_drought : string "<A drought<#88f>>" ;
   c_wheeze : string "<wheeze-ooze<#88f>>" ;
   c_cave_room : string "<cave room<#88f>>" ;
   c_whey_cup : string "<whey cup<#88f>>" ;
   c_wr1 : string "<wight reigns<#88f>>" ;
   c_wr2 : string "<white rains<#88f>>" ;
   tats_hint : dynamic_string {( me_x_yet ? "{xtats}" : "something you can find with {xme}" )} ;

   # item strings
   i_blokes : string "<'Stable Oaks, Stay' Blokes<#ccc>>" ;
   i_coin : string "<coy nickel coin, ickle<#ccc>>" ;
   i_dpda : string "<Dumb-Pale-Dump Ale<#ccc>>" ;
   i_fspt : string "<Fey Stats Phase Tats<#ccc>>" ;
   i_tool : string "<Tool O' \"Too-Low\"<#ccc>>" ;

   # thinky strings
   t_scam_pill : string "<SCAM PILL<#f80>>" ;
   t_aid_route : string "<AID ROUTE<#f80>>" ;
   t_k_vroom : string "<K VROOM<#f80>>" ;
   t_why_trains : string "<WHY TRAINS<#f80>>" ;
   t_wake_up : string "<WAKE UP<#f80>>" ;

   # meta-verbs
   hone_aye : string "<HONE AYE<#ff0>>/<HONE EYE<#ff0>>" ;
   ho_nigh : string "<HO NIGH<#ff0>>" ;
   vm_about : string "<ABOUT<#f80>>" ;
   vm_credits : string "<CREDITS<#f80>>" ;
   vm_think : string "<THINK<#f80>>" ;
   vm_verbs : string "<VERBS<#f80>>" ;
   vm_versions : string "<VERSIONS<#f80>>" ;

   xtats : string "<X TATS<#f80>>" ;
   xme : string "<X ME<#0f0>>" ;

   # "once" strings
   once_scam_pill : dynamic_string {( r5_ready ? "now" : "once" )} ;
   once_aid_route : dynamic_string {( r6_ready ? "now" : "once" )} ;
   once_k_vroom : dynamic_string {( r7_ready ? "now" : "once" )} ;
   once_why_trains : dynamic_string {( point_k_vroom ? "now" : "once" )} ;
   once_wake_up : dynamic_string {( point_why_trains ? "now" : "once" )} ;

   # parser error stuff
   custom_unknown_verb_error : string "Nothing comes of that. {dadc} has a reduced verb list, which you can see with {vm_verbs}, and all point-scoring commands are irregular." ;
   exits_err : dynamic_string {( is_at "r0" ? "{r0_cantgo}" :
      is_at "r1" ? "{r1_cantgo}" :
      is_at "r2" ? "{r2_cantgo}" :
      is_at "r3" ? "{r3_cantgo}" :
      is_at "r4" ? "{r4_cantgo}" :
      is_at "r5" ? "{r5_cantgo}" :
      is_at "r6" ? "{r6_cantgo}" :
      is_at "r7" ? "{r7_cantgo}" :
      is_at "r8" ? "{r8_cantgo}" :
      is_at "r9" ? "{r9_cantgo}" :
      "You can't go that way. I should have a better message, but I don't."
      )} ;
   nospecial_custom : string "You see no specific item like that--time limits mean I couldn't implement noncritical things. To examine a room, <LOOK<#0f0>>. Note that the parser may not recognize adjectives as synonyms, so using a noun works best." ;
   yn_or_12_or_14 : dynamic_string {( (verb_is "save" || verb_is "load") ? "Please choose from 1 to 4." : in_number_choice ? "Please choose 1 or 2." : "Please choose YES/Y or NO/N." )}

   # items
   dump_ale_description : dynamic_string {( point_dew_nice ? "Full of dew, ready to hydrate." : "Well, actually, it's empty. But the recoder mentioned it had extra capacity. What to fill it with?" )} ;

   # scenery reused
   zoo_anim : string "a hippopotamus, a panda bear, a lion, a giraffe, an elephant and a seal" ;

   # basics
   my_score : string "{score}/{max_score}" ;

   r0_loc : dynamic_string {( point_glow_bold ? "Now that the globe (old) emanates a {d_glow_bold}, you can see a passage leading up." : "You can't see much here. A small {c_globe_old} gives off a very dim light. It seems to be your only hope to illuminate a way out of here. But how to operate it?" )} ;
   r0_header : string "Raw Cold Rock, Old" ;
   r0_cantgo : dynamic_string {( point_glow_bold ? "The only constructive way out is up." : "It's too dark to see. Bumping around is dangerous." )} ;

   r1_header : dynamic_string {( point_dew_nice ? "Dew (Nice)" : "<Dune/Ice<#88f>>" )} ;
   r1_loc : dynamic_string {( "It's nice and peaceful here, really in touch with nature, with water flowing on one hand and dunes on the other. But the {c_dune_ice} also blocks any passage except back east. " + (point_dew_nice ? ( progress_ale_full ? "You already got enough dew, though." : "Some of the ice has thawed, so you can get a bit of dew once you have a container.") : "") )} ;
   r1_cantgo : string "You can only go back east." ;

   r2_header : string "<Comp-Lots-Com Plots<#888>>" ;
   r2_loc : dynamic_string {( "A small techie-corp office.\n" + ( point_reek_odor ? "The area is empty now that you disposed of the recoder." : point_broke_ode ? "A {c_re_coder} sits here programming now, trying frantically to reconstruct the {d_bro_code} from a broke ode." : " You're here alone for the moment. A {c_bro_code} is on the wall." ) + "\nThe only viable exit is south." )} ;
   r2_cantgo : string "You can only go back south. Okay, you could go further into the office, but that'd get you arrested." ;

   r3_header : dynamic_string {( point_whee_zoos ? "Whee! Zoos!" : "{c_wheeze}" )} ;
   r3_loc : dynamic_string {( (point_whee_zoos ? "A zoo with all sorts of animals: {zoo_anim}.\n" : "" ) + (point_blurb_lasting ? "The zoo is nice and quiet now, with the blurb and the blur and the ooze gone. " : point_whee_zoos ? "A {c_blur} seems to be attacking areas by the zoo, and you need to disable it, or at least repurpose it into something less harmful." : "A {c_wheeze} sloshes around here, menacingly. What could it be guarding or oppressing?" ) + "\nYou can only go back south." )} ;
   r3_cantgo : string "You can only go back south." ;

   r4_header : string "Car Parts" ;
   r4_loc : dynamic_string {( point_carp_arts ? "You're amazed all the car parts gave you such information, especially since the radio lying around wasn't working. But you probably can't get anything else from them." : "Car parts lie strewn about here. Perhaps they contain some weird wisdom you haven't thought of, if you look at them right. You've never been quite sure about cars. You just know what you'd better not do, you managed to get an A in driver's ed and avoid any car crashes, and you're less lousy at driving-based video games than you used to be, but none of that really counts as wisdom." )} ;
   r4_cantgo : string "You can only go back west." ;

   r5_header : string "<The \"Scamp, Thus\" Camp<#ccc>>" ;
   r5_loc : string "This camp is at a bit of a crossroads, with passages west and north and east." ;
   r5_cantgo : string "The only blocked way is back south." ;

   r6_header : dynamic_string {( point_aid_route ? "Aid Route" : "{c_a_drought}" )} ;
   r6_loc : dynamic_string {( point_aid_route ? "This aid route runs east and west, with a passage north, too." : "On this dry land, there's passage north and east and west to perhaps more habitable areas. But maybe you can change what's here. {c_a_drought} needn't last forever." )} ;
   r6_cantgo : string "The only blocked way is back south." ;

   r7_header : dynamic_string {( point_k_vroom ? "Cave Room" : "{c_cave_room}" )} ;
   r7_loc : dynamic_string {( point_k_vroom ? "This cave is empty now you got the {i_tool}. There don't seem to be any secret passages, so south is the only way." : "Here in this cave you see a tool, specifically a {i_tool}, in the center. Maybe it's not totally an Excalibur in the stone sort of thing, but it does seem like it's stuck to the ground, and you can't just waltz in and take it. You sense you need to show you have the energy and ability to use it right. The only exit is back south." )} ;
   r7_cantgo : string "You can only go back south." ;

   r8_header : string "Fail-And-Fey Land" ;
   r8_loc : string "This is a canyon running north and south. A gigantic {c_whey_cup} full of nasty whey is here. It reminds you you have some milk near the expiration date in the fridge back home." ;
   r8_cantgo : string "This is a north-south passage." ;

   r9_header : dynamic_string {( point_why_trains ? "<Why-Trains<#ccc>>" : "{c_wr1}/{c_wr2}" )} ;
   r9_loc : dynamic_string {( point_why_trains ? "It's both more peaceful and more lively here with the wight gone. The trains are fostering all kind of commerce and personal interconnection, and that's good for society and so forth. Plus it's just more colorful." : "A {c_wr1} here as {c_wr2} fall. It stands next to its scorch-ere-score chair, an intimidating throne indeed!" )} ;
   r9_cantgo : string "You can go any of the four main directions, or back down." ;
}

integers {
   score : integer "0" ;
   max_score : integer "12" ;
   tats_number : dynamic_integer {(
      is_at "r0" ? r0_hintnum :
      is_at "r1" ? r1_hintnum :
      is_at "r2" ? r2_hintnum :
      is_at "r3" ? r3_hintnum :
      is_at "r4" ? r4_hintnum :
      is_at "r5" ? r5_hintnum :
      is_at "r6" ? r6_hintnum :
      is_at "r7" ? r7_hintnum :
      is_at "r8" ? r8_hintnum :
      is_at "r9" ? r9_hintnum : 0
      )} ;
   r0_hintnum : dynamic_integer {(point_glow_bold ? 0 : 44)} ;
   r9_hintnum : dynamic_integer {(point_why_trains ? 0 : 36)} ;
   r8_hintnum : dynamic_integer {(point_wake_up ? 0 : 42)} ;
   r7_hintnum : dynamic_integer {(point_k_vroom ? 0 : 15)} ;
   r6_hintnum : dynamic_integer {(point_aid_route ? 0 : 35)} ;
   r5_hintnum : dynamic_integer {(point_scam_pill ? 0 : 44)} ;
   r4_hintnum : dynamic_integer {(point_carp_arts ? 0 : 44)} ;
   r3_hintnum : dynamic_integer {(point_blurb_lasting ? 0 :
      (point_whee_zoos ? 57 : 44) )} ;
   r2_hintnum : dynamic_integer {(point_reek_odor ? 0 : (point_broke_ode ? 44 : 53) )} ;
   r1_hintnum : dynamic_integer {(point_dew_nice ? 0 : 34)} ;
}

booleans {
   # game state (noncritical)
   showed_first_note : boolean "false" ;
   warn_score_header : boolean "false" ;
   wait_yet : boolean "false" ;
   me_x_yet : boolean "false" ;
   won_yet : boolean "false" scope="survivor" ;
   in_number_choice : boolean "false" ;

   # scoring, in approximate order
   point_glow_bold : boolean "false" ;
   point_dew_nice : boolean "false" ; #r1
   point_broke_ode : boolean "false" ; #r2-1
   point_reek_odor : boolean "false" ; #r2-2
   point_whee_zoos : boolean "false" ; #r3-1
   point_blurb_lasting : boolean "false" ; #r3-2
   point_carp_arts : boolean "false" ; #r4
   point_scam_pill : boolean "false" ; #r5
   point_aid_route : boolean "false" ; #r6
   point_k_vroom : boolean "false" ; #r7
   point_why_trains : boolean "false" ; #r9
   point_wake_up : boolean "false" ; #r8

   think_scam_pill : boolean "false" ; #r5
   think_aid_route : boolean "false" ; #r6
   think_k_vroom : boolean "false" ; #r7
   think_why_trains : boolean "false" ; #r9
   think_wake_up : boolean "false" ; #r8

   think_any : dynamic_boolean {( think_scam_pill || think_aid_route || think_k_vroom || think_why_trains || think_wake_up )} ;

   # game progress (critical)
   progress_ale_full : boolean "false" ;

   # option(s)
   opt_hone_aye : boolean "false" ;

   # game state combo
   can_fill_ale : dynamic_boolean {( point_dew_nice && point_reek_odor && !progress_ale_full )} ;
   r5_ready : dynamic_boolean {( point_carp_arts && point_blurb_lasting )} ;
   r6_ready : dynamic_boolean {( progress_ale_full && point_reek_odor )} ;
   r7_ready : dynamic_boolean {( point_scam_pill && point_aid_route )} ;

   # blocker dynamic booleans
   r0_hone_block : dynamic_boolean {( opt_hone_aye && point_glow_bold )} ;
   r1_hone_block : dynamic_boolean {( opt_hone_aye && progress_ale_full )} ;
   r2_hone_block : dynamic_boolean {( opt_hone_aye && point_reek_odor )} ;
   r3_hone_block : dynamic_boolean {( opt_hone_aye && point_blurb_lasting )} ;
   r4_hone_block : dynamic_boolean {( opt_hone_aye && point_carp_arts )} ;
   r5_hone_block : dynamic_boolean {( opt_hone_aye && progress_ale_full && point_dew_nice && point_reek_odor && point_scam_pill && is_at "r9" )} ;
   r6_hone_block : dynamic_boolean {( opt_hone_aye && point_aid_route && point_blurb_lasting && point_carp_arts && is_at "r9" )} ;
   r7_hone_block : dynamic_boolean {( opt_hone_aye && point_k_vroom )} ;
   r9_hone_block : dynamic_boolean {( opt_hone_aye && point_why_trains && is_at "r8" )} ;

   # rendering
   indoors : dynamic_boolean {( (is_at "r0" && !point_glow_bold) || is_at "r2" || is_at "r7" )} ;
   show_overlay : boolean "true" ;
}

vocabulary {
}

locations {
   r0 : location "{r0_loc}" header="{r0_header}" graphic="r0_graphic" {
      on_command {
         : match "glow bold" {
            : if (point_glow_bold) {
               : print "It's not going to glow any bolder. You can see your way out, and that's good enough." ;
               : done ;
            }
            : print "The globe begins to glow more boldly. You can see your way around a bit, but no exit yet. However, you discover a globe, older. Pfft, that's no problem. \"Glow, boulder!\" you yell. And a boulder behind the globe (older) does so. It begins to shake. You back up, and it and the globe explodes, revealing a way up!" ;
            : set_true "point_glow_bold" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_glow_bold) {
            : match "glow _;_ bold" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
   r1 : location "{r1_loc}" header="{r1_header}" graphic="r_blank"  {
      on_command {
         : match "do nice" {
            : print {( "You resolve to be a decent person. This " + (point_dew_nice ? "on top of getting something from the Dune/Ice!" : "almost moves the {c_dune_ice}, but not quite. Perhaps you need more than just spiritual changes. \"Do\" does seem a bit vague.") )} ;
			: done ;
        }
         : match "dew nice" {
            : if (point_dew_nice) {
               : print {( "There " + (progress_ale_full ? "was" : "is") + " already enough dew to collect if and when you need it." )} ;
               : done ;
            }
            : print {( "The ice melts bit, leaving dew beneath it." + (point_reek_odor ? "" : " It might be nice to bottle, but you have no container yet.") )} ;
            : set_true "point_dew_nice" ;
            : gosub "add_point" ;
            : gosub "ale_fill_check" ;
            : done ;
         }
         : if (!point_dew_nice) {
            : match "dew _;_ nice" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
      on_describe {
         : gosub "ale_fill_check" ;
      }
   }
   r2 : location "{r2_loc}" header="{r2_header}" graphic="r2_graphic"  {
      on_command {
         : match "_ ice" {
            : print "You mutter to yourself, \"Say! Nice, sane ice!\"" ;
            : done ;
         }
         : match "broke ode" {
            : if (point_broke_ode) {
               : print "You already disrupted the Bro Code." ;
               : done ;
            }
            : print "The Bro Code's text seems to crumble, then transform into a musical score. You play it through your head, and unless you completely forgot how to read sheet music, the tune's genuinely horrible.\"" ;
            : print "While you contemplate this, a dudebroish fellow stops in, scratches his head, grumbles a bit, and goes to the computer to work on getting the Bro Code back in place. \"When they need a tough job, they call for the ... <RE-CODER<#ccc>>! And my bottomless bottle of liquid nourishment!\"" ;
            : print "You really don't think the {d_bro_code} deserves to be built back up, so you need to figure out a way to neutralize the {c_re_coder}." ;
            : set_true "point_broke_ode" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_broke_ode) {
            : match "_ bro;_ code" {
               : print "The {c_bro_code} seems firmly in place. You see no cracks in its reasoning, which is kind of depressing, because it feels simplistic. But they must be there!" ;
               : done ;
            }
            : match "broke _;_ ode" {
               : gosub "say_half" ;
               : done ;
            }
         }
         : if (point_broke_ode) {
            : match "reek odor" {
               : if (point_reek_odor) {
                  : print "Things don't need to smell any worse here." ;
                  : done ;
               }
               : print "You hear a small cracking, then smell something vile. \"Dude!\" the recoder says, noticing you. They're a bit surprised it isn't you. They can't find where it's from. \"That's it. I can't work in these conditions.\" The recoder rushes away so quickly, they forget to pitch an empty glass of {i_dpda}. You take it. You might as well." ;
               : pocket "dump_ale" ;
               : set_true "point_reek_odor" ;
               : gosub "add_point" ;
               : done ;
            }
            : if (!point_reek_odor) {
               : match "_ re;_ coder;_ recoder" {
                  : print "Working frantically, staring at the screen, trying to rebuild the {d_bro_code}. You have plenty of time to distract him from this daunting task, but you just need to find the right distraction." ;
                  : done ;
               }
               : match "reek _;_ odor" {
                  : gosub "say_half" ;
                  : done ;
               }
            }
         }
      }
   }
   r3 : location "{r3_loc}" header="{r3_header}" graphic="r_blank"  {
      on_command {
         : if (!point_whee_zoos) {
            : match "_ oil;_ ooze" {
               : print "You look at the ooze and name it oi-lose oil/ooze." ;
               : done ;
            }
         }
         : match "whee zoos;wee zoos" {
            : if (point_whee_zoos) {
               : print "You continue to enjoy your surprise trip to the zoo. The animals express joy as well." ;
               : done ;
            }
            : print "The wheeze ooze bubbles up, making one final big old wheeze, and then soars into the air like a geyser and pops. There is rumbling below, and then, surprisingly, life! All sorts of animals have been released from underground activity: {zoo_anim}. They sure do seem happy to see you. " ;
            : print "Then, a menacing noise. A {c_blur} -- thankfully, it's far away from the zoo, but it's still annoying." ;
            : set_true "point_whee_zoos" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_whee_zoos) {
            : match "whee _;wee _;_ zoos" {
               : gosub "say_half" ;
               : done ;
            }
         }
         : if (point_whee_zoos) {
            : match "blurb lasting" {
               : if (point_blurb_lasting) {
                  : print "Once the blurb got in your brain, it was already sure to last." ;
                  : done ;
               }
               : print "Staring at the blur, you figure out a pretty catchy jingle, both for visiting the zoo and for making yourself seem kind of impressive.  Nothing too pompous of course. But it makes you happy and gives you confidence and ideas for other ways to seem slick in conversation." ;
               : set_true "point_blurb_lasting" ;
               : gosub "add_point" ;
               : done ;
            }
            : if (!point_blurb_lasting) {
               : match "blurb _;_ lasting" {
                  : gosub "say_half" ;
                  : done ;
               }
            }
         }
      }
   }
   r4 : location "{r4_loc}" header="{r4_header}" graphic="r_blank"  {
      on_command {
         : match "carp arts" {
            : if (point_carp_arts) {
               : print "You gained no further insight into linguistic gymnastics. You found everything pretty much the first time." ;
               : done ;
            }
            : print "While you're not sure what a bunch of renderings of fish could do, you sort of hope for them anyway. You get something unexpected: revelations for conversational tricks not only to make yourself seem more impressive than others, but to feel less unimpressive in the presence of people who puff themselves out a bit too much." ;
            : set_true "point_carp_arts" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_carp_arts) {
            : match "carp _;_ arts" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
   r5 : location "{r5_loc}" header="{r5_header}" graphic="r_blank"  {
      on_command {
         : match "scam pill" {
            : if (!r5_ready) {
               : print {( "You can't quite convince the scamp that you're able to sell the \"wares\" effectively. You haven't gained " + ((point_carp_arts || point_blurb_lasting) ? "enough" : "any") + " verbal facility yet." )} ;
               : set_true "think_scam_pill" ;
               : done ;
            }
            : if (point_scam_pill) {
               : print "You aren't getting anything more from the scamp." ;
               : done ;
            }
            : print "You walk up to the scamp. Thanks to the blurb (lasting) and carp arts, any lack of confidence is buried. You say you're ready to help help other people, at least people who are willing to help themselves, and if not, well, they deserve to get scammed, and if they learn something from how they get scammed, that is helping them in a way, too, unless they're unwilling to reflect how they should've done better." ;
            : print "\"I like how you talk,\" the scamp says. \"You know, I'd like to get you started in our company. But there's talking and doing. Before you get your first bottle of scam pills, you'll need to show that you can be an entrepreneur building something from something useless. Like this coin! Someone told me it was useful in the right situation, but I always found it useless. They said it required a certain something, and it would take someone with something special to do something with it. So you think you're not completely boring, right? Maybe you can do something with it.\" Next thing you know, a coin's in your hand and the scamp's back in the big tent, saying, \"Don't come back without results!\"" ;
            : print "You look at the coin. It is a {i_coin}." ;
            : pocket "coin" ;
            : set_true "point_scam_pill" ;
            : set_false "think_scam_pill" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_scam_pill) {
            : match "scam _;_ pill" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
      on_describe {
         : print {( point_scam_pill ? "The scamp has left, or rather, he's back in his tent now. He's given you what you need, or what had better work, because you're not going to get anything more from him." : "A {c_scamp_ill} stands here in a campsite of tents. He's not physically ill, although it seems as though he would be willing to tell you how and why he got cured, and how he would sell you that solution.\nNaturally, he lives in the big tent." )} ;
     }
   }
   r6 : location "{r6_loc}" header="{r6_header}" graphic="r_blank"  {
      on_command {
         : if (!point_aid_route) {
            : match "_ rout" {
               : print "Very, VERY close on the second word. 80%% in fact. But, to be pedantic, the rout will be just to the west." ;
               : done ;
            }
         }
         : match "aid route" {
            : if (!r6_ready) {
               : print "But you have nothing that could relieve the drought yet." ;
               : set_true "think_aid_route" ;
               : done ;
            }
            : if (point_aid_route) {
               : print "Emotional support is the only aid you're going to get here. These people mean well. And saving them will let you move on." ;
               : done ;
            }
            : print "You figure you can make this place an aid route now that you can bring water to it, and the cracks in the dirt start closing." ;
            : print "You figure it's going to take a while to repopulate, but you're shocked to turn around and see a cheering crowd, of a lot of more or less identical people, but hey, it's good to have friends. They introduce themselves as the {i_blokes}. They look familiar, but you can't place from where." ;
            : print "They say they can't offer much more than emotional support, but they hope that's something, and they hope the purpose you get, or increased purpose, helps you down the line." ;
            : print "They're still being oppressed by the wight, true, but your recent actions give them confidence things will change even more!" ;
            : set_true "point_aid_route" ;
            : set_false "think_aid_route" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (point_aid_route) {
            : match "_ blokes" {
               : print {( "The {i_blokes} " + ( point_why_trains ? "are glad to see you but know it's time to move on after your victory." : "cheer you on in your quest to defeat the wight. They'll provide backup when needed." ) )} ;
               : done ;
            }
         }
         : if (!point_aid_route) {
            : match "aid _;_ route" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
   r7 : location "{r7_loc}" header="{r7_header}" graphic="r7_graphic"  {
      on_command {
         : match "k vroom" {
            : if (point_k_vroom) {
               : print "You already put yourself in a position to run off with the {i_tool}." ;
               : done ;
            }
            : if (!r7_ready) {
               : print {( "That feels right, but you don't fully feel worthy yet. You might need to " + ( point_scam_pill ? "help other people" : point_aid_route ? "feel more confident in your words" : "unravel a couple mysteries") + " first." )} ;
               : set_true "think_k_vroom" ;
               : done ;
            }
            : print "The tool seems stuck in place, but then you realize that part of the problem is there's a hitch on there, you have to pay for it, and what do you know? The queen fits in nicely. But it's not just the coin. You have a purpose, and that lets you pull the {i_tool} out of the ground. You've also said the magic word to get it running. It has some weird sort of electric motor in it, and you're not sure how that works, but you're glad it does. It must be useful somewhere. " ;
            : set_true "point_k_vroom" ;
            : set_false "think_k_vroom" ;
            : destroy "coin" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_k_vroom) {
            : match "k _;_ vroom" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
   r8 : location "{r8_loc}" header="{r8_header}" graphic="r_blank" {
      on_command {
         : match "wake up" {
            : if (point_wake_up) {
               : print "You already woke up. This should not happen." ;
               : done ;
            }
            : if (!point_why_trains) {
               : print "Without getting rid of the wight first? Well, you'd be able to move on, but think of the poor citizens of this little imaginary nonsense world! Also, I don't exactly have a master's in dream logic--I didn't even take a course on it in college--but this is the dream *I* built, dang it, so I'm pretty sure there's some sort of butterfly effect that'd come back to your own world and curse your sports team for the next hundred years. Clearly consequences not to be trifled with." ;
               : print "P.S. if you don't have a favorite sports team, your favorite television show will get worse, and you won't understand why, and neither will many other people watching it. Everyone will just feel bummed." ;
               : print "So trust me. It's all very serious stuff, obviously. Take down that wight!" ;
               : set_true "think_wake_up" ;
               : done ;
            }
            : set_true "point_wake_up" ;
            : set_false "think_wake_up" ;
            : gosub "add_point" ;
            : print "You don't wake up right away. Instead, you open a passage down to the Fake or Fey Core, where the people you aided from the route take over." ;
            : print "The next morning, you wake up early, and you realize it was a bit of a weird dream, but it was a heck of a lot better than the ones you used to have, ones you forgot you had, like being back in high school and having the principal inform you you got an F in the class you actually got an A in, and your protests only make things worse." ;
            : print "There were other worse ones, but it's the sort of thing you can't discuss with other people, but perhaps all those books about changing your mindset, even the cheesy ones, actually helped your subconscious in some way." ;
            : print "Suddenly you remember the coffee shop where you were cursed for interrupting. And it's not there. Now, you've heard of seasonal stuff popping up and disappearing, but this was a bit much, too fast you stand and stare for a bit, then you feel a tap on the shoulder. You turn around. It's the poet! ";
            : print "\"Oh, hey, nice job with all that. I hope you enjoy it.\"" ;
            : print "You're a bit confused, because he sure didn't seem to appreciate your comments on his poetry. But he explains." ;
            : print "\"So few people even pay attention. I don't appear for a lot of folks, but what I do is, I look for somebody who kind of needed to speak up, who hadn't for a while, who maybe notices things aren't right but buries what they see. You did, this time, and you called me on it, so good job." ;
            : print "\"But what did I do, really?\"" ;
            : print "\"Well, not all that much, but enough. You see, the people in the coffee house crowd, they were the blokes.\"" ;
            : print "The blokes come out. They wave at you. They put their poetry person costumes on and off. So that's where you saw them before!" ;
            : print "\"But why me? What's the point?\"" ;
            : print "\"Well, there's no hard algorithm about when I show up for people, but you may just have needed a push to go in do interesting stuff, and to speak up when you have doubts.\"" ;
            : print "That's a good point, you say." ;
            : print "\"I had a bunch of other people to show up for in all of October, and usually about half of them come through. You were one of the ones that worked out. Now to find places to speak out without them landing in your lap. Don't wait for a huge sign.\"" ;
            : print "It's an odd sort of motivation, but it works. November is very productive. So is December. And January. And come October, you think back. You've kept it up, and you hope the next people stumbling on the coffee shop benefit as much as you do." ;
            : if (!won_yet) {
               : print "{one_time}there's nothing new to be found on replaying. Try some of the other {ecomp} games, whether or not {ecomp} is over!" ;
            } : else {
               : print "Thanks for replaying. Sorry there was no new content!" ;
            }
            : set_true "won_yet" ;
            : win_game ;
         }
         : if (!point_wake_up) {
            : match "wake _;_ up" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
   r9 : location "{r9_loc}" header="{r9_header}" graphic="r_blank"  {
      on_command {
         : match "why trains" {
            : if (point_why_trains) {
               : print "You think up more ways trains are good for society, especially if they run on clean fuel. But the infrastructure isn't there for any more y-trains at the moment." ;
               : done ;
            }
            : if (!point_k_vroom) {
               : print "You don't have the energy yet." ;
               : set_true "think_why_trains" ;
               : done ;
            }
            : print "You doubt the wight really delves deep into conversation or philosophy, but you wonder if plain old general heckling will work. So you just start asking why, all kinds of pointless whys, of stuff that is really out of the wight's control, but then again, you've had people do that to you to distract you, so why not pay it forward to someone or something who is less awful than you." ;
            : print "The {i_blokes} from the east follows your lead, battering it with silly questions. In the confusion, you take the {i_tool} to the chair and with some trial and error figure out what parts of the tool help disassemble which part of the chair. Crash! The chair falls apart. The wight screams in agony and disappears into a small dot. The tribe cheers you some more. They're a good bunch, yet you feel you don't quite belong here." ;
            : set_false "think_why_trains" ;
            : set_true "point_why_trains" ;
            : gosub "add_point" ;
            : done ;
         }
         : if (!point_why_trains) {
            : match "why _;_ trains" {
               : gosub "say_half" ;
               : done ;
            }
         }
      }
   }
}

# Defines things in the world (scenery cannot be carried)
objects {
   phase_tats : object "{i_fspt}" ;
   dump_ale : object "{i_dpda}" msg="{dump_ale_description}" ;
   coin : object "{i_coin}" msg="Well, you can't say it doesn't have truth in advertising. Whatever joker designed it must not have thought things out too clearly. Or maybe they did, hoping the flaw would make it worth a million bucks or something down the line. But if they did, why, they didn't think out holding onto it too clearly. Still, it's yours now, and hopefully it's useful somewhere." ;
   tool : object "{i_tool}" msg="The {i_tool} is an odd combination of a saw, spoon, saw, corkscrew, knife, wrench and pen. Hopefully you'll figure how to use it when the time comes." at="r7" conspicuous="false" ;
   chair : object "a scorch-ere-score chair" msg="Voltage springs from the chair. It seems to be giving the wight energy. Perhaps with the proper tools, you could dismantle it." at="r9" conspicuous="false" ;
   wight : object "the wight" msg="Voltage springs from the chair. It seems to be giving the wight energy." at="r9" conspicuous="false" ;
}

connections {
   from, direction, to = [
   r0, up, r9
   r9, north, r8
   r8, north, r7
   r9, west, r5
   r9, east, r6
   r5, west, r1
   r6, east, r4
   r5, north, r2
   r6, north, r3
   ]
}

barriers {
   block_init : block {
      location = r9
      block_when_not = point_glow_bold
      message = There will be a way up when you have a light source.
   }
   block_hone_r0 : block {
      location = r0
      block_when = r0_hone_block
      message = No need to go back. You found the light source to leave.
   }
   block_hone_r1 : block {
      location = r1
      block_when = r1_hone_block
      message = No need to go back. You got dew in the ale bottle.
   }
   block_hone_r2 : block {
      location = r2
      block_when = r2_hone_block
      message = No need to go back. The ale bottle was all you needed.
   }
   block_hone_r3 : block {
      location = r3
      block_when = r3_hone_block
      message = No need to go back. The blurb, lasting, is stuck in your head. That's enough.
   }
   block_hone_r4 : block {
      location = r4
      block_when = r4_hone_block
      message = No need to go back. You've learned the carp arts as well as you could.
   }
   block_hone_r5 : block {
      location = r5
      block_when = r5_hone_block
      message = No need to go back. You've got what you needed from the camp and beyond.
   }
   block_hone_r6 : block {
      location = r6
      block_when = r6_hone_block
      message = No need to go back. You got what you needed from the aid route and beyond.
   }
   block_hone_r7 : block {
      location = r7
      block_when = r7_hone_block
      message = No need to go back. You got what you needed from the cave room.
   }
   block_hone_r9 : block {
      location = r9
      block_when = r9_hone_block
      message = No need to go back. You defeated the wight reign(s). Time to finish things off.
   }
}

subroutines {
   add_point : subroutine {
      : print "<Your score has just gone up by a point!<#ff0>>" ;
	  : increment "score" ;
	  : update_graphic ;
   }
   say_half : subroutine {
      : print "You got half right." ;
   }

   ale_fill_check : subroutine {
      : if (can_fill_ale) {
         : print "With the dew flowing and the empty {i_dpda}, you have an idea. You can fill the {i_dpda} with dew to see if, indeed, it really does have increased capacity! It most certainly does." ;
         : set_true "progress_ale_full" ;
      }
   }

   check_options : subroutine {
      : match "hone aye;hone eye" {
         : print {( "Available exits are " + (opt_hone_aye ? "already" : "now") + " honed to ones you still need to use to win." )} ;
         : if (tats_number == 0 && !opt_hone_aye) {
            : print "Since you're choosing this option, and you're done here, I'll make a note of that. You can exit, but you can't come back." ;
         }
         : set_true "opt_hone_aye" ;
      }
      : match "ho nigh" {
         : print {( "Exits are " + (opt_hone_aye ? "already" : "now") + " all available, even ones you don't need to revisited." )} ;
         : set_false "opt_hone_aye" ;
      }
   }

   odd_dir_note : subroutine {
      : match "se _;sw _;ne _;nw _" {
         : print "You don't need to use diagonal directions. Only the four main cardinal directions, and (at the start) up/down." ;
         : done ;
      }
      : mask {
         : if (is_at "r9" || is_at "r0") {
            : match "d _;u _" {
               : return ;
            }
         }
      }
      : match "u _;d _;enter _;in _;exit _;out _" {
         : print "Only the four main cardinal directions are used here, and (at the start) up/down." ;
         : done ;
      }
   }
}

themes {
   my_theme : theme {
      status_bar {
         : header_text ;
         : dynamic_text "my_score" ;
      }
      theme_settings {
         parser_delay  = 0
      }
      colors {
         status_bar_pen   = 15
         status_bar_paper = #222
      }
      system_messages {

   i_cant_do_that = That's a valid command, but not right here and now.
   not_present = You can't see ${entity} here.
   ask_new_game                                   = Would you like to restart {dadc}?
   ask_quit                                       = \"Sign out. *SIGH*, nowt!\", you mutter under your breath.\"\nDo you wish to quit {dadc}?
   invalid_choice                                 = {yn_or_12_or_14}
   post_quit = I hope you enjoyed the experience. Pressing {key_enter} will restart {dadc}.
   unknown_verb                                   = {custom_unknown_verb_error}
   you_cant_go_that_direction                     = {exits_err}
   you_see_nothing_special = {nospecial_custom}
   you_see_nothing_special_2 = {nospecial_custom}
      }
   }
}

## Print the objective when the game starts

on_startup {
   : print "{dadc}: an {ecomp} Petite Mort 2025 entry.";
   : if (won_yet) {
      : print "Thanks for replaying, but this is a reminder to look at the other {ecomp} entries, too!" ;
      : press_any_key ;
   }
   : print "Late October night. You're walking home, and you realize, the only thing worse than an open mic poetry reading is an open mic poetry reading with speakers blasting outside. <Dusk, airy, does carry<#f80>>, you hear, in an exaggerated tone. What a load of nonsense! You can't help but walk into the coffee shop in question and give the performer a piece of your mind." ;
   : print "\"Duh! Scary!\" you blurt out sarcastically." ;
   : print "\"How dare you,\" says the performer. He is wearing a black cape, black shirt and black pants. One day, soon, you will see the results of your impertinence. Impetuousness. \"Po', um, ... poem,\" you fire back as you leave. The performer says \"YOUR DAY WILL COME!\" and then continues." ;
   : print "Why did you bother? Still, after, you think no further of the incident. The final day of the month, you take care of things you meant to, and plan for November too. You have quite a few, big and small, and you fall asleep in the process. It's so much more productive than New Year's resolutions, which never have urgency. Sometimes you get annoyed at repeating yourself each month and finally take care of this or that. But you could still do better." ;
   : print "You don't remember what happens next, all you remember is, you wake up in ..." ;
   : press_any_key ;
   : clear_screen;
}

## Execute this every time a player moves or redescribes a location

on_describe {
}

## Test VERB NOUN that the player types and executes conditional actions

on_command {
   : match "xyzzy _" {
      : print "A hollow voice intones \"Our gaol: argh, ail!\" It's so spooky, you don't dare quibble over details of pronunciation." ;
      : done ;
   }
   : mask {
      : match "load -" {
         : print "You hear a low \"Do load, ooh!\"" ;
      }
      : match "restore -" {
         : print "You hear a tune. It could be called a re-load reel/ode, I guess." ;
      }
      : match "save -" {
         : print "A ghostly apparition with \"Save? Illun', Say!\" Villain written on its front taunts your very reasonable precaution. But you don't need to listen to such meanies." ;
      }
   }
   : gosub "check_options" ;
   : gosub "odd_dir_note" ;
   : if (is_carried "tool") {
      : mask {
         : match "x tool" {
            : set_true "show_overlay" ;
            : update_graphic "ig_tool" ;
            : set_false "show_overlay" ;
         }
      }
   }
   : if (is_carried "coin") {
      : mask {
         : match "x coin" {
            : set_true "show_overlay" ;
            : update_graphic "ig_coin" ;
            : set_false "show_overlay" ;
         }
      }
   }
   : match "z _;wait _" {
      : print "\"Loaf, right? Lo, fright!\"" ;
      : if (!wait_yet) {
         : print "{one_time}This is just a silly general response. Waiting gives no penalty or benefit." ;
         : set_true "wait_yet" ;
      }
   }
   : match "about _" {
      : print "{dadc} was written for {ecomp} Petite Mort 2025." ;
      : print "I used Python scripts to generate a lot of the code to keep the development time under 4 hours." ;
      : print "I'm grateful to the organizers for not having image creation time count against these four hours." ;
      : print "{dadc} has the same mechanic as two games I wrote in Inform 7: {g_wp} and {g_ut}." ;
      : print "{dadc} is meant to be a fairly straightforward game with ten rooms and twelve points to score." ;
      : print "Every point scoring command is an unusual verb, which it is indicated by the location, or something in the location." ;
      : print "Some text is color-coded. <Green<#0f0>> is a clickable link, and <Orange<#f80>> or purple indicates a verb you can use. <Lavender<#88f>> text clues what to focus on." ;
   }
   : match "credits _;credit _" {
      : print "Thanks to Allyson Gray for testing." ;
      : print "Thanks to the administrators Ruber Eaglenest and Alyshkalia for holding {ecomp}, as well as former administrators like JJ Guest and Duncan Bowsman." ;
      : print "Thanks to Chris Ainsley for creating Adventuron." ;
   }
   : match "help _;hint _;hints _" {
      : if (!point_glow_bold) {
         : cycle key = "help_first" predictable_order = "true" skip_interval = "0" {
            : print "The initial puzzle is the only one that has a specific solution. You can get hints from {tats_hint}." ;
            : print "The globe (old) could be brighter. You need a combination of two words." ;
            : print "The game title, {dadc}, is an example." ;
            : print "It's two words strung together with the same pronunciation. Do this with the globe." ;
            : print "{gb_done}. (The hints will cycle now.)" ;
         }
         : done ;
      }
      : if (!me_x_yet) {
         : print "There are no specific hints now you've gotten past the first puzzle, but {xme} will give you a hint item which may be intuitive, but if not, come back here for an explanation." ;
      } : else {
         : cycle key = "help_general" predictable_order = "true" skip_interval = "0" {
            : print "Ahead is an explanation of {xtats}, which gives a number that clues what you need to do in the current room. Note that it doesn't track whether or not you're ready to, though you can still guess, and {vm_think} will hold it for later." ;
            : print "The number 0 means there is nothing else left to do." ;
            : print "A two-digit number tells you something about the two words you need. I didn't make it too out-there, I hope." ;
            : print "The tens digit is the length of the first word, and the ones digit is the length of the second." ;
            : print "So, for instance, using the tats for the first puzzle would give 44, as each of {gb_done} has four letters." ;
            : print "First words range from 1 to 6 letters. Second words range from 2 to 7. This is the final clue. The clues will now cycle." ;
         }
      }
      : print "Fill in later." ;
   }
   : match "history _;version _;versions _" {
      : print "The first release of {dadc} was October 30, 2025, for {ecomp} Petite Mort. It was released along with {l_gsgr} and {l_cdsa}." ;
   }
   : match "score _" {
      : print "You've currently scored {score} of {max_score} total points. There are no bonus points." ;
      : if (!warn_score_header) {
         : print "{one_time}This is tracked in the upper left." ;
         : set_true "warn_score_header" ;
      }
   }
   : match "think _" {
      : if (!think_any) {
         : print "You haven't had any good ideas you weren't able to execute yet." ;
         : done ;
      }
      : print "You reflect on what you wanted to try, but you weren't prepared properly to go through it them." ;
      : if (think_scam_pill) {
         : print "You can {t_scam_pill} {once_scam_pill} you have the verbal skills to impress the {c_scamp_ill}." ;
      }
      : if (think_aid_route) {
         : print "You can {t_aid_route} {once_aid_route} you are able to help with A Drought." ;
      }
      : if (think_k_vroom) {
         : print "You can {t_k_vroom} {once_k_vroom} you have the motivation to look around Cave Room." ;
      }
      : if (think_why_trains) {
         : print "You can {t_why_trains} {once_why_trains} you have something to tame the wight." ;
      }
      : if (think_wake_up) {
         : print "You can {t_wake_up} {once_wake_up} you've defeated the wight." ;
      }
   }
   : match "verbs _;verb _" {
      : print "To complete {dadc}, you only need the four compass directions (well, the exit from the first room is up) and the twelve special commands clued by descriptions." ;
      : print "There are also metaverbs: {vm_about} gives general information, {vm_credits} gives credits, and {vm_versions} shows version history and release dates." ;
      : print "Finally, there is an option: {hone_aye} blocks off exits to done rooms and what is behind them, while {ho_nigh} lets you traverse freely." ;
   }
   : match "take _;drop _" {
      : print "You don't need to TAKE or DROP anything here. It's all done for you." ;
      : done ;
   }
   : match "x me;x myself" {
      : if (!me_x_yet) {
         : print "Weird. You see some numbers on your arm that seem to morph a bit. Perhaps they can help in some way. Let's call them fey stats/phase-tats." ;
         : pocket "phase_tats" ;
         : set_true "me_x_yet" ;
      } : else {
         : print "Nothing on you but the tats which can give hints." ;
      }
      : done ;
   }
   : if (me_x_yet) {
      : match "_ tats;_ fey;_ phase;_ stats" {
         : print "The tats swirl and form a number: {tats_number}." ;
         : done ;
      }
   }
}

on_tick {
   : if (!showed_first_note) {
      : print "{one_time}{vm_about} will give general game information. {vm_verbs} will describe {dadc}'s stripped-down parser." ;
      : set_true "showed_first_note" ;
   }
}

on_render {
   : if (!show_overlay) {
      : done ;
   }
   : if (is_at "r7" && !point_k_vroom) {
      : overlay "ig_tool" x="107" y="14" ;
	  : done ;
   }
   : if (!indoors) {
      : if (score == 1) {
         : overlay "p_1" x="0" y="0" ;
      } : else_if (score == 2) {
         : overlay "p_2" x="0" y="0" ;
      } : else_if (score == 3) {
         : overlay "p_3" x="0" y="0" ;
      } : else_if (score == 4) {
         : overlay "p_4" x="0" y="0" ;
      } : else_if (score == 5) {
         : overlay "p_5" x="0" y="0" ;
      } : else_if (score == 6) {
         : overlay "p_6" x="0" y="0" ;
      } : else_if (score ==7) {
         : overlay "p_7" x="0" y="0" ;
      } : else_if (score == 8) {
         : overlay "p_8" x="0" y="0" ;
      } : else_if (score == 9) {
         : overlay "p_9" x="0" y="0" ;
      } : else_if (score == 10) {
         : overlay "p_10" x="0" y="0" ;
      } : else_if (score >= 11) {
         : overlay "p_11" x="0" y="0" ;
      }
      : if (is_at "r0") {
         : overlay "r0_2" x="0" y="0" ;
      } : else_if (is_at "r1") {
         : overlay "r1_1" x="0" y="0" ;
      } : else_if (is_at "r3") {
         : if (point_whee_zoos) {
            : overlay "r3_2" x="0" y="0" ;
         } : else {
            : overlay "r3_1" x="0" y="0" ;
         }
      } : else_if (is_at "r4") {
         : overlay "r4_1" x="0" y="0" ;
      } : else_if (is_at "r5") {
         : overlay "r5_1" x="0" y="0" ;
         : if (!point_scam_pill) {
            : overlay "r5_scamp" x="122" y="22" ;
         }
      } : else_if (is_at "r6") {
         : if (point_aid_route) {
            : overlay "r6_2" x="0" y="0" ;
         } : else {
            : overlay "r6_1" x="0" y="0" ;
         }
         : if (point_whee_zoos) {
            : overlay "r6_zoos" x="70" y="14" ;
         } : else {
            : overlay "r6_ooze" x="70" y="14" ;
         }
      } : else_if (is_at "r8") {
         : overlay "r8_1" x="0" y="0" ;
      } : else_if (is_at "r9") {
         : if (point_why_trains) {
            : overlay "r9_2" x="0" y="0" ;
         } : else {
            : overlay "r9_1" x="0" y="0" ;
         }
      }
   }
}

assets {
   graphics {
      r0_graphic : dynamic_graphic {( point_glow_bold ? "r0_2" : "r0_1" )} ;
      r0_1 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAA8AgMAAAD004yXAAAADFBMVEUAAAAAQABAIAAAAECkMZGDAAABl0lEQVR4Xt3XPWoDMRAFYLHbBAezV3C5uE8ZfIpBjUFXcONae5QtcwyRO4i9hhthCBYv+jPuUjx1EQhcfezME9ZI/e81fHUCx10nsA5LF7Bb1NoFpA7ME+BYIH//OwDQFaR9ysCNBOa0kdeDBFIFUwbYLgy1gmDZGt6UGgHvDdvGtVQQCuDIEE9RF2C7kSEiaHiLIA+uBQreIAB3CpiVGkUMtgRcNQEclNqLAMiAOCqED9HQWbjKhQghAwLJQGCAtL2IacCZBaSUIASwKyGImFKBMcQxqIAFoL3lAQAwiJoBpicA3MECugICRwB734AoJBBqCPAkMMXWghwGBUDHeg7TcsRJnLAhL88DoReI9gloDkAvEM2ziVoRwIgothcQAOCBdhQjBSxKZUCzf2mqAdIDnBLQ2njhLucX4KirbYqthCiOnC8aAM1e776mgDM5IiGI4ee0NcfQgB8GmEsMtgDf5KA6xgYMCzllfQrqrLuwk2oFHAfMaW8tg6V3Wl/Y98KYgfKTPAmqvljIx9fx1Y7eZ+PhD+AXExSOh/4QrGsAAAAASUVORK5CYII=" ;
      r0_2 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAA8BAMAAAB7k3k3AAAAElBMVEX/AP8AAAAAAMAAwACAgIDAYADIYlDUAAAAAXRSTlMAQObYZgAAAr9JREFUeF7t2c2R4yAQBWAOCkBdxQSwoAiaCOSyEtga5Z/KjhGjhzTQCMzal3knly/91WtZf1b3N6cV8AtY1s+3Apb1vr4VsH4ZLlQwE9F/Afj+10vzaVRDRwDm+wrMI5Mw3wMUCD0AKP+vCUkDKEQpEDoA0P3NGEkwAyAJVHsBBpmEAkhB0AeA+ZKA9oxB0AuwHBbgOL2E+Sdg6AT4xHzrrHMmKaAoKqQPYI0XEAGmXAEADD0Ay16AdQyAZZMrADtQPQAowDneFP6zM9O5AEQJAtX6EwjlbwXwCUAZwJAAEOmGDbhHfPUbgJ3jPGAUKlCeWPsbtH5+SAA4VDBnAegAAORCFysKYJwE/A4cZwGkEBFAum4DUQsHAAkANQgACEob8DkB3JQFjLFABEAgA0IY8yPATHIFIoCuHQIh8XzjjAhAZABduA6cC3BsHV8HDDJAXwaggO3KxHnAWAEgXQIYAKKwMTgG5QoKALoK4Bjw4Ex5wFgD0AWAtWeA/wKAkmAoAKgECBUc5gMwUzI1AC0DwsSofh+WAVQBoBLAODYW878jA6gCoMUzIS7DWAAA80yl6CKASgDjUoA/JKQzABUAwC8CkB+bAjxW0AmgswAi2qZiBztgPwYxpi9g/vC629Y7pwA+5w67ALzrw9sCAGcCADLpAKAN4GW3MBMCC4As0MGyqQQA+cYhCawFZyIfPt2SZTPr5FOLBIiPpXlHnQCuBCivBIBS9OHROHFTyPfKVAH04dEwCZju1REA5/ZDFlwPT1dkAKpCqni2wsfEDsyeqg003ZBgB6iAI8D0HEBXPJ3id2CiPAeofUNx+wlYnwA0vKPxAI4LWNoB4NRUYI8AL2sC6MbXVPawgS9TI0A3vymNAVMZ0P9dseVofh2g/9vyFwJQAQT49jUA/FmD/vHlKwDLmqqlEdDrX8Pl3pZ/zcg0XLjMexUAAAAASUVORK5CYII=" ;

      r1_1 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAD1BMVEX/AP8A//+lKirStIz///8lByWRAAAAAXRSTlMAQObYZgAAAedJREFUeF7FltGJwzAQRBNcgUAFHHYDwusGAuq/pjuO8z3inZUQAmc+IzL7NLMKedynZ/3Tq57KtX4CIENyK0A6x34K4JybaACAzzQwC7DY7ApMApjZWAMA0MXEHe1X4wDvJBN3tDECLk4DPYCFAerwTyMrwGAAMCw65BIFcGoUIGsARjXvyCEaA6gOAMMAoDQDgLyl3KtApKkGANclWBoAVIGhNzIkALoEZkU2kMQzxE/PUPsZE2BZ5AooAOWzGTLhHhPg2AdwfsxYLSYwJBkdVarILaEOe9nXOGITKq3lyU0A6WNmbwQ9AIYJt2cTYL34kMq6OSsOnYo6LFEDNZ8A5xx8sFk1AGCCwC4iAA1g5gi4xr7JDmz9UVCCwko1aqA+GIQKOTLGLg3sAqLIclhBCcAgVP59dtUBp0TH95x0AwkAHwE4uyG1g4TgXMB6VqEMADOFD5b7l3tnLgS9nXoFAACe3BWAOQBCgMe8jjYA8KShtOqHzlAIYgAEAASySSLioWvFNYjoAUBbFACflh7A+UC3KIIUATgQHTMNjMRwXP6RotwDIP8B+RjDBlIPQLcynMERNJBUAvtcABA4AH5+KKQNgNekDt1Aqh0AApiVbOCVJYBCmtblDYDzsHskVzDfDpBdA/UbQaTBRJ/1JGoAAAAASUVORK5CYII=" ;

      r2_graphic : dynamic_graphic {( point_reek_odor ? "r2_3" : point_broke_ode ? "r2_2" : "r2_1" )} ;
      r2_1 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAElBMVEUAAAAAAICAAACAgID/AAD///95hLHsAAABi0lEQVR4XtSUQU7EMAxFfxj9fUzFHsEFWswBWHAAS+D7X4VMphR1BGpoTSues8jy6Uk29JqTao8LGk6v13wv4BXTCib2EzAanaMAqw3dbUeBypECLGP/rcDz6xcBBcz5WwGfeI/cgnaBN/2czQJGOHFgAXM4uaYAcAop4LB1BQAGFbBVBXoAIQW4soAlwbFb4HcxWwDC5gVQWC4AZPBPCpi3XMIXIAMhlxDErACrwBKolIbhBcz3FTAYZlvAJoEBlRRfwHxR4KEgGWfktvy3CeDCJEBvKPA4SKoBkjxtLDCHbt4m0PVSyBouwFYBqQW6aAHzVoGMM+ECbBRQHQtorAC8WWCQMxoswGaB0f9IAZEk3UYBrOUeEKTyMm7wE4sCPT6KI4MTAIEYCC6IBQRICfbjCdN/KyJ+XMAAHsS5AjI3y1c2iHG95OANLbWAVmYECHIkhQC7CgEJ5gSSpBYA+U2rP8tIgsCpd5DVbxHwHWTfb8EjyL7fyK6HgEQ/6L7t9ft3kNfv30HiV3QC62CCUBmIgHMAAAAASUVORK5CYII=" ;
      r2_2 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAHlBMVEUAAACAAAAAgAAAAICAQAD/5bSAgID/AAAAAP/////dlWwQAAABpklEQVR4XsSUQUrEQBBFv0QHeqeAHmBOIDRzg2zcCp11BKZm60a8gECWxTAkqdta9jQRgpLEtFOPT8jy8Yv+oDEbohpnKDs1jflZQCJMEQxcUADQJAEXbfTLFxRwrLEUENaYNiCahQKH92/WCrCDZqmADHQ2An3T0qk8blvqcj3D5Q2U5ZN+jQRa6j+Aa+qbzmIHYgMnFYgNWOzAQa9fA6DjtrPYgdgAFx6xAZMdaPX6YfccX0H+ZwhlugHgEe5fdoBlxhK+vaoAoEuY/xm6SQElIKIdZhdgmSNQJYEQsgs4WdDATYXcAiyTAnfKfRL4+l8ngDODgGa6gQeidAJ6WdfACCcsxgJupkCqjnILsBg34IwFIGJ8gvkCtK82+2Ap4H3hd9U6AfyVW8Cj0ARc4TcmBWp8FkfGNgjFQBRzhcQIzHGiuC1o6Rjpo1Te9gvRcEVSEClxBojv2X+5abTPuz/f9uAyFuDqjIBhttS+gAcDAdA5gTQdCyh0BF44S0vDsDLuQFl/iUDtQDl/CXUEyvkLOfgRADfA9++6/voOlPU3dODhVjgBwAKZz0it0s4AAAAASUVORK5CYII=" ;
      r2_3 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAFVBMVEUAAAAAAIAA/wCAAACAgID/AAD///9IsYhYAAAB0klEQVR4XsSVQW6DMBBFv9vIa6yiHiDiAJWaAxA63XfD3otm7n+EDnZiJDStGzGExxdi+fRlf0BLDkQ9MmROT0t0AU5ESqDwQAFAchXwPCHv+EABHyV7CnCU7NoAS+4U+Bxn1gpED4kqMKhJAly4bChwVJMEvun2XGyuoSrQqak0YCgwdGpKA8BBacBwBwY9pQHAlwbsd6DeQA8gN2C/A/VDyOLoAmwaYMm911AaIH6d3ltcQwj1HQAa+E12IHK9gXH8mgQgS2i/A74IdHoSSEiH5gKRdxbws4CexBkJZy2QC6hM8bsQGkyEF/leJ4BMEZBwdYhO5+AgOBc+1jWwwHOcGznqyQJtH4SGzAX8LNCpuQkECK61Foj83wYaTJgL5ALqZ4Do2gDZCoAT1Z+RCJzDBBkL5ALqO3Aq/jsKhOBCu1IAf/OkR3gDApykwTN+oyrQ46c4MsZhEAaC4BQRvZt7AAVPyHswSPv/J+AoRBdL5ixRmLntPd5VzNxO4S2l/DnTrit4xQJM6rA0cwooybIpENBKIADqsbXzE7BysYAEDQFv/94CJ9mUyjn9Hajav0soEO+Af38kXgL+/bGs/AmAHoDv23X743egbn/8DqBH4QB2mKmOBg6NugAAAABJRU5ErkJggg==" ;

      r3_1 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAgMAAABslMwaAAAADFBMVEX/AP8AgAAA/4DAwMBXgOY0AAAAAXRSTlMAQObYZgAAAn5JREFUeF7k09GJxCAQBuBBX4IEbCGPck8pYMHWLMVShG1kS5gChDlnEl3Nht3c3eMNBHz5v1/RwL+eJJ8M9YAF8PkCoJPdAJvtPXWAT5roCgDzBtyK0DdS8kSptrwHNEtYGHunVGFCqoCm/BmwKLVQAUs8KFSVzoE0FwJgRtawAV6AXFf45ha0AGt3KbrkaJu6FboKZAYsJU37cP79GVCnDiCUTaOlOh+BG2AH+FUA8teBGVYrTlAs7AD9CJBr/AMwQSgCAwYg/QJQ8NgBB+EJ4OC0gDoCU4kuDCwGFohPAPQ5oF6B6ASYCrC0Z4zDUXIHhBFwHJVFA3RX+XIJCuLUAxxxRrZSAU5hrfQt34DFDEAsUXUEarwdpwcmNQChAaYB/tmoh34TBAg9WAC3AUqA44w/4hcDMADyAoQ6B3yGoe8EMDvA7yHCh4kK3BFwrHzXOceocsQwHIdzSTmsm1eleL5ETuHcwMX8DHE/hfc+6tMM7ChijWedx+aPDUJIHxIJIkWyfJgibxINisiP4C+PVoJO8J7vOuDt7P+78Q7wvuKLnzcpYZpgSJ6AV5LcPSnyNsfmRbxJnoBQbZMygZlElv8nrIBwFolfgcicvaC0kLfgKxK3Mfs7S3DgNgB7PPe2ucaoJMB6w+xM+gI+zA9aApBHodu/QKwL6cDnE/hp5zInCVDKs1DyC/BW7U4vKU/gbufq0g4USuLkOC46sklqqANrHIjNgeGmIgK61x1gb+y9/Zku/OKue/kKRKrNS0EiwNl7h6Pq3u42gNAUsN4XIBUHJDnAAAIURmhURbWaPcawncBBvYAAOCC8gMgrVe/QFbNxgktKU7iASCfLX9/Huft6KgMQAAAAAElFTkSuQmCC" ;
      r3_2 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAJ1BMVEX/AP8AAAAAAP8AgAAAgMAA//+AQACAgIDAwMDgAIDggED/AAD////uFPqZAAAAAXRSTlMAQObYZgAABP9JREFUeF7E1b1O5DAQB3CnSVZUmYYcKNVVV9xDhcZFqqQakCgQDS6uoUJ71dJYOvMGXBWapfBD3YztXcf52PsQ0g0bsopWzI//jEEsVrn0MPuzh2a39snF+niAbAhQ4H8G4IcAMneDKSCnq/nNCLD7CAAAK6BMAblo+FoD5K1wAE9A7P4dkAH3BoAI8P396zTgZsuA4maLHw0QjQPkJxMoCPBUIOJ2++RzWAIopdzdG4tuBrAWAGo7JAB5qDWACYAtekCHXN0csFHf3u9OAWobqhwBcmMcwJhmGXCmDwn0VV9tyeFrBsg2ynpAgeiuWF0AAAGGegzI5Y/vDOBbswiQRwBS3RwB3YwK91/fvgAn4AExgSIAhppCqGEMaPIjoMlPA7DH3s0gCKaAUt3Xb5/uOIBQESACAAgA8HcjkDsHwNA3JFDNARnn+w4MsIi3+1EEeATwCBKAlK3xpaVcBBgGCDxUCAAQ+ylV8c+mBPAW9jjUI0AXlxDqZAlzkbfPlwR4vtSNaJYAuvGACsEtgXf0c4BSg62HCIhEDACYA3gE1J8FKyPIPaDAHnznagWglLIw1HeiwDACVoYjS4CMXpaI9WAHkQDMZ8PXacBxBrCWACrFO8AAXxGADIBHfw75FM4AkACS7rnxqgJdBlCtAq7VrbXXYgHAI8gegTparkGkACqgaw7ItdTSBIBABOABrAA2BHhAfF8DACcggKucAoAJM0Dr2kttmqACqPBYsAT4Zq0DAJ83qBLAxQU1zuIKRkBraA2fjdEpQBrjDqhuZeMBGWCsCrsUoI4Agb0DYAQgjQAABIClggjwnXyl/4zOqLORHMIRIDAWTAGbBwLYAwC4WBkBLv6hnu8AR/BqXiiABEDN21Zqp9vNAWWBIgEoJMB+7wDFKgD8EkICELJ9+fmqZfqwlRw+T0DreQKdQAIkAXjA3gGQAdw9AWQAdQCUEeAFRstpLLJ1j+lLixmAenRFnwbgdsABBN4OYHFcHbcEsL4AUsC5lPJqCuDfX2oy6F0AFLG/YEM2AlAAYQnjJ/tqCqgDoIZyDMjOr+T5VTkB8BpKbeQub6cAZxHdCLBhllIqAEToPwGIAwAAEoAkgEwBZ2d009Loht4GQBX/stO3BKACwO3Ar0rqYEVhGAgD8DMMgfayLxGyS8GzsC+wwb32knuJMr6ANIBv4c238LaAD7Uzk3RskFr8DWUIkHzOVB1FfqizREObdgLcLBhHsU4CAgAudfO6uVCtpWy2cmiHkc93Lsqm5ySZQAZ4AnAAnwH3CeDmANsIoDcrAIsK6BTwxden3AAZQSqADqs4BUiMhRkgBKBPqAAXAWhpcwMGnACxUP1voowPwKkA8DVAWqCAvqFVAehOBpRSAVGaUAPGYwYw5Hz/K4AO1zoACuAJBJ7BCgAngJsD/Jg7QAxMZ0T/AgBvAGj0VGtZAHxuG2uAtEAyHgly+FkCgCn/gx93MFZHYEEBvLcOGFwNSHgqhBEJgNtFABQA3GD2EjZBAaGfj0ABFwXE8qgByXtkwThi2rXDXgDIia6jpQBKBgB/1Qogax0gV7tcKoCzQ86I3g/YFkBGZq0CgK9/BkgTKoB7ANwEqKMAJRwQt5wlgLMA+d17BvT0qAFXboLTchGwnQVx/wKwcIINTU8JDaUP5m3A5wPw3Q4KeMoiwIE1ACZY4EJUZfIbmoGWC4CqBTR+Kf4BLJl9M9ZhWwoAAAAASUVORK5CYII=" ;

      r4_1 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAGFBMVEX/AP8AAAAAgACAQACAgIDAwMD/AAD///+JPPJHAAAAAXRSTlMAQObYZgAAAaRJREFUeF7tlL1qwzAURts3yIewtTtDZ1WmLxCXzoZqbyios0roff1Klq7jWMSGBpMOOshYGJJ7OP55+G8UCoVCoVAoFAo2cr/5X0R+2Y+7zY8CX5slsB/L8ykJ/GyU4BG7lf68NkoA2i3PHwW2SfAocwHN2IGal9U30Xh0BohE3CkgbjKB2q/bBZ6J6DsTUHIUGHcLBQAI/UeeiGifCxALqFPXuUzgiDoKAF5AVb3BPCGuCCgIYBogCWBEBAEHGQXkQes3MRcAMAgcAX9Spje9brvAgceEJvx/6eKwUVbUx0kAFpDERAFaEHixMEmg6mv7GQVejTHvo0DVe4HKePy505E2E3huAsMgCQkX1oWAOoXfORZgYDCZowyqJMCO/sKkQMcc5regwSjgcRSOKIBlAWBSWvkAZwHAHwrgAjOBCGs0FwXcuQARLQkoCDYZOhgDFghOiBrnArkACen4FuynBSgKOEf5M3CVYUybElc9Fx4LtCygVwScP1hA5gLr8GOR4AKaA1x7GbO3YOE7sIYCxKzAOvl3IJ3zL+E6gM4K3ILiVL9QwXgKZGmCkgAAAABJRU5ErkJggg==" ;

      r5_1 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAJFBMVEX/AP8AAAAAgAAzMzN4PACAQACAgICWZDK0jGTAwMDStJb/AAA992e/AAAAAXRSTlMAQObYZgAAApBJREFUeF7Uk71qwzAUha+Hm0WLRTCE9DEumfwSMl36s/c9MhTyAh1CpwxdMrkYAkYv18g6UmVqOoii0AM2SMv59EmX/nNWLz63a7dTLjdhWLn245R3x1BePtrBcCksQeH09poRFqhgnkcv3w5va7FhYahUWEH8II9rEYsVU6kYVA4yAcjoAfpSCpjQKABoPU/PpQTQGATsjmuJCnoyhQQo//C/ATASxIUEKN8nEaD1RPTnCjqdJgggFQTIvQcQC4CoQKdpsmVvz0maGgIAIAlAC4CgoOoOSfa5YswCABMA7AxgBAAvAnCmgCrtP32cIIAsZkB2AgCZAPqoYPOwSQnqLAVsfgDghJ9a6zv3a7QGgNXXOABeBOAcAkOzG9ien2q3CQCrZwCt2+uDour1sJ/dQc6AMi0AMAUA9+kuAkgE4CWA3wb0q5g6SHEQCKIw3FewURLIqn+o1Zwi4BwgxTRzDoHBK+Qa2eaUAzZj7KooBCLzlor2pw8eK1FS1cD9fslM+WgegDlTLZSQu+u16iAirGQNIFjATckz4NQYwGkByMjRAtBNQL04AAp1A7eokCtA1zwFZJB0rDsAAaj36QGQw7hIFwEsIPpvENYiJAOYki79ImedAeoBtoHGnLcNUGhsBx4gfwBJ4yLDz1AA5nd5gK4DbK0F0H61S0HUAhC1AP96eRngn/cA0QmgVA0cxu/ojtPXAf4F6bM/Vx0gEBCeAnT7LA/avi1PASgBpW5gHC/ZP/46wH9C7vq+7gAhCBYwlMV5L6DsU2sBaFDbwFAW590p+9TaDiRgARFlpwjJAgi2gbI4+0ShsR0Etzi7Avw+BbsY+wL8acEOxs4Ad1xwi7Nr/MAEe2Hf+H0K/C+AX6IV9h+o1YlPAAAAAElFTkSuQmCC" ;

      r6_2 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoCAMAAAAmJNS7AAAAV1BMVEX/AP8AAMCAAMCAQDCAgICmyvDGlo7YqKDhsanqurLzw7v/AAD/gAD/iIgAAAD//wC9jYXAwMAA4ACQYFiZaWGicmqre3O0hHyAgMCAIACAQAD///8AgADkSFWcAAAAAXRSTlMAQObYZgAAA0NJREFUeF7slQtqwzAQBXWCJ/+dT+9/zmqcXaPURQWbmgp3NpghYGAHRQm7+ecDQt3EA8s79S4PR/eHapeHw/tDhctfNkCEqwaIIEYmUZcJEB35JLCf96w/QDQKJ6C84yVPQHnBOu/ACKzN+GPnLVfj/hA31BXgAYf9eAAK3OHk8/9o4PHyGcwnMB/BfADzHvCFgwHg/iKchkLTKE2TTGGelWZefJqUZlp8HJVmXHwYlGZYvO+Vpk+2UmMA8ADgAcADgAcADwAEeKO6AMoCKAugLICyAMoC6JsAKgZwwl8JIBJYAJHAAogEFkAksAAigQUQCQoBCgXC2QH0lTUAeADwAOABwAOAB4BdAc4/AHq+swZopOwSVHYJKrsElV2Cyi5BqfATKP7PnR9AqQEfUmgNEBpIhs9gPoH5COYDmPeAbwPsWfH+uwFY3gYNXkA3HuZt5l3myvy5+b6eAFJ+AkC63W6Sedu2q3dd5w7uvL56jBHfBPgspox2G4SBICiIAafAVu1Tof7/76zvNrJOOA4lJspYikbiaUfRhRILKXwrfnUbwkPcPXS5/QcEBT8E4l9E/ZuoE6j/EvVPIm5BqAyw1ARwBbIjmPYT6H4C3U+iJ6D7CXQ/wSkBlgMB3JHtBBveEGDvD1BRwP0fhA2r8KRDsF4RYCGFAi7n6HoSsN3fCyt9EO64F25+Fej4EEC/CHgcoDCPnw4XcE/MD5sACH2P+PpoCMOA+IbMvUd8Xv16RXxX9Tg+vg/1OD6+S8CZAfYLuKP78wCEo0nmnjAAYQDCAMJOALOuRPmrqyaQPABMAJgAMAFgAsAEgAmA3QCJ8ATnz2cAaAKOhs7OXOeDAXQ+GEDngwF0Ph4GWOoChPPnM0AkBRCGzL1oChBJASIpgLAT4E0FQhEeQZgjCAxD5t4D5gjCHEGYI4jyEeT+2gInj2cAXsFo4oNwx71A5xWk8wrenDewHGAhlQXqt+cF0MkPHZPx2fhqfDTeGm/oLwvgTt5PgK7rADqmaUo+z3PydV2Tj+OYvG3b5E3T0BmgQNr+9vkEHYH4RNRnor4S9ZGot0S9IUgBzsW9cD+B7ifQ/QS6n0D3E+h+At1PcH4Ad5zw5gB/oj+nt5kXW4wAAAAASUVORK5CYII=" ;
      r6_1 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAD1BMVEX/AP8AAACAIACAgID///+zIdTbAAAAAXRSTlMAQObYZgAAAk9JREFUeF7s0NEJACAQw1Ad4eAWKnT/mUR0AhH6kzdByPgGAAAAs65YgA/FAtRyWcEA95YMqH44sAqrAhvJgRA2LRh9A+YquL0Kvv+mXhgPvLTa3ChhJiyKDZhsZujKRDCyFzKZcttG/njZwUhF/8z6/vunK5DICkhb7jtYZn7SjgOEAJO9Ex3P5mG7BNqBdn7JZQJXhDedSyD6TlHGEID2OMkG904kgGgiJExlCbySHeDslwC8CBRWGcAEXM9oFOcrdidpvtAOBSIIoiLRcbnJciryvr5dMQQyA3ApGa5EqDCi2F1GFgGAeQn4bur9BEAEtgl+el8M1x4+1FbW+QIRVJIKACOPswdxe0XfFhPe5PYRv4Jhwbl1QCOSgTINkSGwOp+0EwljAxc7VoP/g74+4L9aNCZAuLVMQlfc+upomAO6TbqsTiFaa7EEntfrZq3bgzICv83xcBAu0lH2S8DnkLXg7fwNv9m7/y7wkChbHgET29+TcIjQEM0S8z3QgWW/nvH7FYWv/GKS1kR4BsDs4ju/xPGwA9t3zcl8wBK3nk/4zRSEStkvY48jGBiFS4k6RWvilA9RtGMIEL1bCsrskUCLhx05A6hn8Uhf5aaPhBxnGxA5mLEDyVAetT6Kf1W0X5LtPu4nIDGdQctkCRhtNUxPIE3oYQx63vf/ZIhvAZ163NrEiCSPaRuSow+TgbxP+IWOLqBrNwUdHS81ceBUSCLcqDWbhBwP+K8hqRW+ILglwFWUARy8BAw1LTRxeR9GcFlrIWfi3wgMypaZ8Q9bSScH9J8BswAAAABJRU5ErkJggg==" ;

      r6_zoos : base64_png "iVBORw0KGgoAAAANSUhEUgAAABEAAAAMAgMAAAD5S74sAAAACVBMVEX/AP8AAAD///9YpImpAAAAAXRSTlMAQObYZgAAADBJREFUCFtjCAUCB4asVatWOTCkTp06zYEhc+bMWQ4MaTNnLoOJQGQhKhkYQBiDBAB4aBM2fcIEkQAAAABJRU5ErkJggg==" ;
      r6_ooze : base64_png "iVBORw0KGgoAAAANSUhEUgAAABEAAAAMAgMAAAD5S74sAAAACVBMVEX/AP8AAAD///9YpImpAAAAAXRSTlMAQObYZgAAACtJREFUCFtjCAUCB4asVatWOTCkpqZOc2BIS8sEk2mzYCIQWYhKBgYQxiABKoQRmuYX8TsAAAAASUVORK5CYII=" ;

      r7_graphic : dynamic_graphic {( point_k_vroom ? "r7_2" : "r7_1" )} ;
      r7_1 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAgMAAABslMwaAAAACVBMVEUAAACAQADStIwviuC4AAACP0lEQVR4XpWVPY7jMAyFNQHUpOclcorVYN1sJS3IFLrB5BQ7xRzBTapMoUHMU65F0j+xZwL7IUUeIH0hnx8cR6MQaKviZGYAUsCZu0uXOfeGSzFHWVy2Q+l7QDMAusslX3tU6Yq5NovLhHryGYAylfx2roD2rZhrs7hsw8OPgGYBGN21uq8rpYrA7wBxKwBB9oAlAAUQfgC02QCRyFcAVgSsAUkAEiKXPrbBtZm/SsdcjwXZooKcAJLur0AUgDxGLsRlcNRbLpeuLpAo2cYICkABeAU8ly6QyBheABKIlxnk64Muxcy8LEE+ss0IAAM0TwEmrxygOAKQngCic4+DAdlZrIBogEBe4GvAK7NzLxMArUqhcly1oLE0tBZ3FI/c6+7mlQnSvSUg0FzobIIDm5zT+aINioCPgESTojvI3LnFE4+6uV5e6lzlkUaAkicd9AKc6ZUXem+Gk4EM4BWAE+DXcJjouATcPAWNMQ6Axu4CuV5AkpuNgLzUHXRc0CpbpiCAqL+KY2788sorSYKJvDURq1E1+sDA7os5rgHvun8gbSLCmN5vDfzffGFe66brJgnCWTEtug3SEFAz9wawDh55mzyNbzUF2A542gj4JEo4B1g1I2/UXQHNCLAR/vBWASW0N4gzkCeKp82AD0r18hwQSEq/OQS95g2w6xlYCBQUMgGQd0iaYFUeFPcAPjSANAH2RGBt9guAtWh7m8MjAHmXYPpnMv1l3hkCapX3R2AhmBztboGFsASceJ+8Af4DlcmAHg0AuTEAAAAASUVORK5CYII=" ;
      r7_2 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAgMAAABslMwaAAAACVBMVEUAAACAQADStIwviuC4AAACGElEQVR4XpWVQW7jMAxF1QDcdM9L9BTVYLyZFTXgv8900Xuku0CnnIJfIBEbM7DfykKgZ/uJSRoS17joAKAg7yADTxiSFOSuUa662FKg6TsKtrR7SktAlXP5P4HnI2pKIWuVn/xLsFEwsoZlHoVjYMC4PAgsBUpP1jCBIwShcOVyL/AQdGaixxH0LVSxVgPC54BCj4JBgXIDu0l4uU8c6LAQCFoIBgNS6BnMNa4Ay4MYwOYaIfjGrhR4CISCOk1WLGiRCLEcQgHiZhs0A4AF7SgIfQ+3A70EGoLsQI1jD+XCC4WlwLEXSAmsNS1BZd7gQIMtQYdQvijBjzlbewGh15WJFC1OlFmoP2Cv85tHayVgXtsJdtG9gdzmojWhcT2oqz8LBgprt/Xc/jaTe/tGRo6YIwU0Fzdu0CjwzAe/k4xAgVDgSN4n+QBe94K7oDOjUbDOA5HkG41u5K4+9zyUIZSjvJpqCIx39ew2X/INCuGkCtApyHobD0xr/3zUG1QEvn8HLASa9X4y+J9Z3OeRO7DCxzFyMFe6EzCCs7lQwBlk8DMI6leNAgM4Muf4AoY/CTiaNk/yoGArATP+mmdRDF+/IG2JBLC304JPjChQAnQO/ekI3CYl4BlciIBOSQl8XoCTwFFewK4IPhlglOBSAk6z7AR5BmenuZeACS6h9c+0+D3nxQjOUb6aoCKQhpqCixFIu96QCMhfrRBUznZeA6AAAAAASUVORK5CYII=" ;

      r8_1 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAElBMVEX/AP8AAAAAgACAQACAgED///9w89uMAAAAAXRSTlMAQObYZgAAAnxJREFUeF6tltGR6jAMRUkHuRENxB1otgJm9nXA9t/KW7JBB+GAPST3Ix/22Pf4ylicsmRflcaYHbQMuH29k1gw3Mc8Zl2nNxrwR3rcb/EGwBXITACgcIXPmUY4bMjZbz28VvOQAZCI13Eg4ctiAXILZPJxAsUfAq8WBC/yvgBcILOdiFpJDwAKgiGfX9aKQMk/JGYtAFxJRmp5hZO/iRI1riCxEelgGBgB5AiUV6SNnBK1KoCTB/Ko9GvaBEAa7gFwKIsEWwARdSATch8AK8RQfDoAPFfCy69UOaCKT7cVUTMyddsGGJTuINzGdrP1A/gEcjxeHgR/buOjv4/cwVQBtivqB1AJZOJUfP/c8pOt8aStCuBfZj1ZzFo1PeHdBiBwgiCCQY+VWMZEAEp1U1k1E7bH2FRWLcMAEZrjTH7iSUzZ4wvIVLLCIgTe8xhH517VbYmprQC87BDN0+11n90KAGkPgOgQGwb+ogIZZ9oDMNsK4GRBf/CRCryUl12y1Vz5HqS2ZG8BPg+Aa2g3BsIFxekAtajA7hqI3lb9e2sFoLJTtEQAYPGHACQ7NAAiQPVPYXmAQdBhAaDKNPe5XAHXoQEQAbFX13D7EcL/SAJQoAEArl7/WWvIUyeBpWMaANsErla4Fy06t4KScWaeJRcAJA9muwvN36ualUoAtDkLgO1WUVo6XxddShsAEyd+AHCFoANg/vd9vf4QQAOAHJYPl5BJCLoBfrUXgGHUDfDzIYAdA8Ad7AbgCwBISdNxADOXkMYMwCL7pA+db/6Xno4U3uLADQCVtuYIoCHdIxA+LYCuPnAmgHYNyL0GqOXHAhBwN0CPvxb1ELwE+A+Jq+tri1Cf0QAAAABJRU5ErkJggg==" ;

      r9_1 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAG1BMVEX/AP8AAAAAAP+AQACAgADAwMDggED/AAD///+ZPK2ZAAAAAXRSTlMAQObYZgAAAVJJREFUeF7t0sFKxDAUheGT0nSdC1N0OcwrdB6g0oDbVDjMtqt5AkvXvrlJTLXu5QbUnxK6y8ch+EV51K3dRigmIsYJDj1vr1CslxjdYQDvveIE5mEjtzXgsycROSkCbtsavxl7raT0JhDe+nnlF8B/BK1YOgygNkEIAYbk3GeAtba8AFF6BZaAsZzfHnsGAPnwe1AoABIBIj3nBILmAgXghBKjqQIgjDjHmEkAqgMsjIGzZBDEgj4giDEZ4BJHHwBCDO6xBCD0ATZAugRY8r8+AAR2AFEDYBfcc+gWpFq/B53unyE3lQVOVyjVHa9HOxTApAbAN8BUAKehDqAdrj43Db4G4DhAqw0oA0huGsYqgOMTrAO4SgGMioDuAPB7qAQAMCIduoD4LRUBzRm44A8DmnT55VwApRFa/QPK3U09QBMBVRewl3S8VANYEgAZfgDwDr0eaif+Zt2bAAAAAElFTkSuQmCC" ;
      r9_2 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoBAMAAADj1Dm6AAAAG1BMVEX/AP8AAAAAgACAgICmyvDggED/AAD//wD///9NxK75AAAAAXRSTlMAQObYZgAAAilJREFUeF7tlj1u3TAQhIc30Dj2e26tnCBh/lojusBDoAMYAdQ/pFBtpNGxM4vRIgDhNmKRN1jvt3AzQ2ppGB01FJLopyKUngGIzhrQS2XI3kmnlwA5CKVnADIXYWkEbI2AtREwNgKmRsDcCKFCfwFKgwO8nJZFbUcEeH3cNrUdEeB6Xle1HRHg6W4c1XZEgOf7aVLbEQEuD/OstsMBQP+gUN0BKGeeDAegnPloOADlzLPhAJQz7wwHoJx5bzgA5cwH42+AXMEMEK5yTwDhGiESQLhGiAQQrhEiAYRrhEgA4aoQiQww2DljYJFtmBsOIFuZGw5wZZgbDiBbmRsOIFuZGw5wYZgn8h3mBbjHEpJcjFxCkpuRS0hyNXIJSY5GLiHJycglJDknMgD99R2jjEOsnk5uZIBXndzIAFed3MgATzq5kQGedXIjA1zi5AlYDA0oCOkDhjXVjHyGVDPyGVLNyGdINSOfIdWMfIZUS8CSOciB/QLkn8L8BAcH8AomQBwdgEZBpwCExT4BCvPmhy4BCoFmAw4NUOgEhYGYKS2NyK0RuTYix0bk1IicG7HV8f8P5AVkPzyAVy+7/cvy80uU5AFl+/0tSvKAsv76GiV5QBnff4ySPKBM3z9FSR5Q5h+foyQPb18Al1qjJA/gVmuU5AFca42SPIBjrVGSB3CqNUryAM61Rkke3r4AotYowMO//U17AQy9+6A6ZmjlIB07/nvddNNNN/0BMXtsliONdH0AAAAASUVORK5CYII=" ;

      # for conditional graphic outside stuff
      r_blank : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEX///+nxBvIAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;

      # item(s)
      ig_coin : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAgMAAABslMwaAAAACVBMVEUAAADAwMD///8Nbde7AAAA80lEQVR4XsXWsY3DMAxG4Z9AdLUKy0WmoQr3PIB04RE0T7xBVNhTRr7g6gBkkdfzqwiQOIN9AvY1BuxmawQ4bNQCQLfRFgDsLz9wvIHmBnpVI8XmBnbIBMEcAHLOE1Y3YEDWQuYFjn+guQGKAd2Icx7A5gdkgkWARY1sCQDv3MBefjUpVL3AI7GQIOfZDzArxA/cuIqRwA0AVWoUWEhwdwJPgHkA2Q0QhCJAv/ZgWVS/tomHFU1CWpoXuMYZkrzAqYl5EOX0Ao9UZSCzH6ALkB838MQF8N0NHMSsCS1wXIU01ch512RlCz8YX3xxRn07PwHBXkr8Ji7dWZIoAAAAAElFTkSuQmCC" ;
      ig_tool : base64_png "iVBORw0KGgoAAAANSUhEUgAAABwAAAAaCAYAAACkVDyJAAABDklEQVR4nL1VURaEIAgc9nUvvZl4MzsZ+7HPltowqK3p9cpURmAgEggsVK4/k4ULmRscmLwLrxJ1vJ4kcxFaZHObZW6znQ8DS0h7vrYE2zzq+ZRT2HMSiGlUf48cZASXaCxjOWfP9hVee9IfeaaRcqJ+ewkPPbRCl3OGFo2XdCpcyJOPvW+tteU9IXn4ruXwTH1Sb217ZVG5imX0NpWODJ9R6aVe2nN4FAU9f7qXFi40CqOOTOUqfUwCAYHCPdECMw8P6/Lwn5gAQCAOZeoofNbvFj5/7ZiELujtgerbEt8WUktofg//RLrysLtvxd9C5G+xEG5JoqQhQq1M/byD9PE6hAQuAKLHrTWJ7BcI3hgI2brRO8F0AAAAAElFTkSuQmCC" ;

      # scenery/npcs
      r5_scamp : base64_png "iVBORw0KGgoAAAANSUhEUgAAABgAAAAUBAMAAABlm+CwAAAAFVBMVEX/AP8AAAAAgACAQADg4ID/AAD///8FXN0PAAAAAXRSTlMAQObYZgAAAG1JREFUeF5tjLENgDAMBBOxgNN4AAoWIBuEFaBPJH7/EXiJ2KbgUjin9zuRZSdpsrRWP3LURvGt2FNA7J87tLsACLldiJ6XuOQISlG+IlaHndCuIAVCUckYLKnJuoWM/yQndkbnJDITYULea+QB4qkcKgtgRU8AAAAASUVORK5CYII=" ;

      # outside graphics from darkest to lightest
      p_11 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAAPAax8/GAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
      p_10 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAAOAHcN+iAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
      p_9 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAANAhqe8OAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
      p_8 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAAMA8Hv9qAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
      p_7 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAALBsG45WAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
      p_6 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAAKBxrJ4yAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
      p_5 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAAJBXda6eAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
      p_4 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAAIBKwr76AAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
      p_3 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAAHD3f0zmAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
      p_2 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAAGDqyFyCAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
      p_1 : base64_png "iVBORw0KGgoAAAANSUhEUgAAAQAAAAAoAQMAAAArNLbKAAAAA1BMVEUAAFDMEWwuAAAAE0lEQVR4XmPAC0bBKBgFo2AUAAAFKAABhzzafQAAAABJRU5ErkJggg==" ;
   }
}
